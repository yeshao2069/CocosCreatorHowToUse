{"version":3,"sources":["cce:/internal/ml/cjs-loader.mjs"],"names":["CjsLoader","constructor","_registry","_moduleCache","define","id","factory","resolveMap","require","_require","throwInvalidWrapper","requestTarget","from","Error","parent","cachedModule","exports","module","_tryModuleLoad","_resolve","specifier","_resolveFromInfos","_throwUnresolved","cjsInfos","resolveCache","undefined","threw","_load","_loadWrapper","vendorRequire","_createRequire","_createRequireWithResolveMap","_loadExternalWrapper","path","URL","fileURLToPath","err","extern","Object","assign","requireMap","originalRequire","resolved","parentUrl"],"mappings":"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","sourcesContent":["class CjsLoader {\r\n    constructor() {\r\n        this._registry = {};\r\n        this._moduleCache = {};\r\n    }\r\n\r\n    /**\r\n     * Defines a CommonJS module.\r\n     * @param id Module ID.\r\n     * @param factory The factory.\r\n     * @param resolveMap An object or a function returning object which records the module specifier resolve result.\r\n     * The later is called as \"deferred resolve map\" and would be invocated right before CommonJS code execution.\r\n     */\r\n    define(id, factory, resolveMap) {\r\n        this._registry[id] = {\r\n            factory,\r\n            resolveMap,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Requires a CommonJS module.\r\n     * @param id Module ID.\r\n     * @returns The module's `module.exports`.\r\n     */\r\n    require(id) {\r\n        return this._require(id);\r\n    }\r\n\r\n    throwInvalidWrapper(requestTarget, from) {\r\n        throw new Error(`Module '${requestTarget}' imported from '${from}' is expected be an ESM-wrapped CommonJS module but it doesn't.`);\r\n    }\r\n\r\n    _require(id, parent) {\r\n        const cachedModule = this._moduleCache[id];\r\n        if (cachedModule) {\r\n            return cachedModule.exports;\r\n        }\r\n\r\n        const module = { id, exports: {} };\r\n        this._moduleCache[id] = module;\r\n        this._tryModuleLoad(module, id);\r\n        return module.exports;\r\n    }\r\n\r\n    _resolve(specifier, parent) {\r\n        return this._resolveFromInfos(specifier, parent) || this._throwUnresolved(specifier, parent);\r\n    }\r\n\r\n    _resolveFromInfos(specifier, parent) {\r\n        if (specifier in cjsInfos) {\r\n            return specifier;\r\n        }\r\n        if (!parent) {\r\n            return;\r\n        }\r\n        return cjsInfos[parent]?.resolveCache[specifier] ?? undefined;\r\n    }\r\n\r\n    _tryModuleLoad(module, id) {\r\n        let threw = true;\r\n        try {\r\n            this._load(module, id);\r\n            threw = false;\r\n        } finally {\r\n            if (threw) {\r\n                delete this._moduleCache[id];\r\n            }\r\n        }\r\n    }\r\n\r\n    _load(module, id) {\r\n        const { factory, resolveMap } = this._loadWrapper(id);\r\n        const vendorRequire = this._createRequire(module);\r\n        const require = resolveMap\r\n            ? this._createRequireWithResolveMap(typeof resolveMap === 'function' ? resolveMap() : resolveMap, vendorRequire)\r\n            : vendorRequire;\r\n        factory(module.exports, require, module);\r\n    }\r\n\r\n    _loadWrapper(id) {\r\n        if (id in this._registry) {\r\n            return this._registry[id];\r\n        } else {\r\n            return this._loadExternalWrapper(id);\r\n        }\r\n    }\r\n\r\n    _loadExternalWrapper(id) {\r\n        return {\r\n            factory: (exports) => {\r\n                let path;\r\n                try {\r\n                    path = URL.fileURLToPath(id);\r\n                } catch (err) {\r\n                    throw new Error(`${id} is not a valid file URL`);\r\n                }\r\n                const extern = require(path);\r\n                Object.assign(exports, extern);\r\n            },\r\n        };\r\n    }\r\n\r\n    _createRequire(module) {\r\n        return (specifier) => this._require(specifier, module);\r\n    }\r\n\r\n    _createRequireWithResolveMap(requireMap, originalRequire) {\r\n        return (specifier) => {\r\n            const resolved = requireMap[specifier];\r\n            if (resolved) {\r\n                return originalRequire(resolved);\r\n            } else {\r\n                throw new Error('Unresolved specifier ' + specifier);\r\n            }\r\n        };\r\n    }\r\n\r\n    _throwUnresolved(specifier, parentUrl) {\r\n        throw new Error(`Unable to resolve ${specifier} from ${parent}.`);\r\n    }\r\n}\r\n\r\nexport default new CjsLoader();\r\n"]}