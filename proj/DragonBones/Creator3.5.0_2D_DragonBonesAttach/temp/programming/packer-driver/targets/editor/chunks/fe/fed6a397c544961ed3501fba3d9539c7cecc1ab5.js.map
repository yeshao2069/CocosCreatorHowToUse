{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/DragonBones/Creator3.5.0_2D_DragonBonesAttach/assets/script/DragonBonesAttach.ts"],"names":["_decorator","Node","Component","instantiate","Label","Color","Prefab","dragonBones","Sprite","Vec3","ccclass","property","type","ArmatureDisplay","generateAllNodes","destroyAllNodes","red","createSocket","redBoneName","green","greenBoneName","blue","blueBoneName","skeleton","sockets","destroyUnusual","s","target","removeFromParent","generateSomeNodes","greens","filter","x","name","length","push","setScale","destroySomeNodes","l","splice","changeMode","isCached","isAnimationCached","setAnimationCacheMode","AnimationCacheMode","REALTIME","modeLabel","string","SHARED_CACHE","color","dbNode","DragonBoneSocket","path","querySocketPathByName","newNode","addChild","targetPrefab","child","parent","node","sp","getComponent","sizeMode","SizeMode","CUSTOM"],"mappings":"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","sourcesContent":["\nimport { _decorator, Node, Component, instantiate, Label, Color, Prefab, dragonBones, Sprite, Vec3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('DragonBonesAttach')\nexport default class extends Component {\n\n    @property({type: dragonBones.ArmatureDisplay})\n    skeleton !: dragonBones.ArmatureDisplay;\n    @property({type: Prefab})\n    targetPrefab !: Prefab;\n    @property({type: Label})\n    modeLabel !: Label;\n\n    @property\n    redBoneName = \"toujiaoR\";\n    @property\n    greenBoneName = \"shouL\";\n    @property\n    blueBoneName = \"bone24\";\n\n    generateAllNodes () {\n        this.destroyAllNodes();\n        let red = this.createSocket(this.redBoneName, new Color(255, 0, 0))\n        let green = this.createSocket(this.greenBoneName, new Color(0, 255, 0))\n        let blue = this.createSocket(this.blueBoneName, new Color(0, 0, 255))\n        this.skeleton.sockets = [red, green, blue];\n    }\n\n    destroyUnusual () {\n        this.destroyAllNodes();\n    }\n\n    destroyAllNodes () {\n        let sockets = this.skeleton.sockets;\n        for(let s of sockets) {\n            s.target!.removeFromParent();\n        }\n        this.skeleton.sockets = [];\n    }\n\n    generateSomeNodes () {\n        let sockets = this.skeleton.sockets;\n        let greens = sockets.filter(x => x.target?.name == this.greenBoneName);\n        if(greens.length === 0) {\n            let green = this.createSocket(this.greenBoneName, new Color(0, 255, 0))\n            sockets.push(green);\n            green.target!.setScale(new Vec3(0.3, 0.3, 1));\n            this.skeleton.sockets = sockets;\n        }\n    }\n\n    destroySomeNodes () {\n        let sockets = this.skeleton.sockets;\n        for(let l = sockets.length -1; l >= 0; l --) {\n            if(sockets[l].target!.name === this.greenBoneName){\n                let s = sockets.splice(l, 1);\n                s[0].target!.removeFromParent();\n                this.skeleton.sockets = sockets;\n                break;\n            }\n        }\n    }\n\n    changeMode () {\n        let isCached = this.skeleton.isAnimationCached();\n        if (isCached) {\n            this.skeleton.setAnimationCacheMode(dragonBones.ArmatureDisplay.AnimationCacheMode.REALTIME);\n            this.modeLabel.string = \"cache\";\n        } else {\n            this.skeleton.setAnimationCacheMode(dragonBones.ArmatureDisplay.AnimationCacheMode.SHARED_CACHE);\n            this.modeLabel.string = \"realtime\";\n        }\n    }\n\n    private createSocket(name:string, color:Color) {\n        let dbNode = new dragonBones.DragonBoneSocket();\n        dbNode.path = this.skeleton.querySocketPathByName(name)[0];\n        let newNode = new Node();\n        newNode.addChild(instantiate(this.targetPrefab!));\n        const child = dbNode.target = newNode;\n        child.parent = this.node;\n        child.name = name;\n        const sp = child.getComponent(Sprite)!;\n        sp.sizeMode = Sprite.SizeMode.CUSTOM;\n        sp.color = color;\n        return dbNode;\n    }\n}\n"]}