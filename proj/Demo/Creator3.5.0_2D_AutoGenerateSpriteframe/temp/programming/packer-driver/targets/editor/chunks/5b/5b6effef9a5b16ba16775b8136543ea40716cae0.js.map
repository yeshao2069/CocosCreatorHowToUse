{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.0_2D_AutoGenerateSpriteframe/assets/AutoGenerateSpriteframe.ts"],"names":["_decorator","Component","Node","UITransform","Layers","Texture2D","ImageAsset","SpriteFrame","Sprite","Color","ccclass","property","AutoGenerateSpriteframe","start","aNode","name","a","addComponent","setContentSize","layer","Enum","UI_2D","uiNode","addChild","sprite","spriteFrame","genSpriteFrame","width","height","color","data","Uint8Array","i","byteLength","r","g","b","image","reset","_data","_compressed","format","PixelFormat","RGBA8888","texture","spf","packable"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, UITransform, Layers, Texture2D, ImageAsset, SpriteFrame, Sprite, Color} from 'cc';\nconst { ccclass, property } = _decorator;\n \n@ccclass('AutoGenerateSpriteframe')\nexport class AutoGenerateSpriteframe extends Component {\n    \n    @property(Node)\n    uiNode !: Node;\n\n    start () {\n        let aNode = new Node();\n        aNode.name = 'new A';\n        let a = aNode.addComponent(UITransform);\n        a.setContentSize(100, 100);\n        aNode.layer = Layers.Enum.UI_2D;\n        this.uiNode.addChild(aNode);\n\n        let sprite = aNode.addComponent(Sprite);\n        sprite.spriteFrame = this.genSpriteFrame(100, 100, new Color(255, 0, 0, 255));\n    }\n\n    /**\n     * 生成精灵帧\n     * @param width 宽\n     * @param height 高\n     * @param color 颜色\n     * @returns sprite frame\n     */\n    genSpriteFrame (width:number, height: number, color: Color = new Color(255, 255, 255, 255)) {\n        const data: Uint8Array = new Uint8Array(width * height * 4);\n        for (let i = 0; i < data.byteLength / 4; i++) {\n            //R\n            data[i * 4 + 0] = color.r;\n            //G\n            data[i * 4 + 1] = color.g;\n            //B\n            data[i * 4 + 2] = color.b;\n            //A\n            data[i * 4 + 3] = color.a;\n        }\n    \n        const image = new ImageAsset();\n        image.reset({\n            _data: data,\n            _compressed: false,\n            width: width, \n            height: height,\n            format: Texture2D.PixelFormat.RGBA8888\n        });\n\n        const texture = new Texture2D()\n        texture.image = image;\n        \n        const spf = new SpriteFrame();\n        spf.texture = texture;\n\n        // 动态生成的纹理，不能参与动态图集\n        spf.packable = false;\n\n        return spf;\n    }\n}\n\n"]}