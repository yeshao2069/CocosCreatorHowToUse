{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.0_2D_EllipseMove/assets/script/EllipseAutoScroll.ts"],"names":["_decorator","Component","Node","Vec3","CCInteger","ccclass","property","EllipseAutoScroll","angle","tempPos","start","initAngle","i","nodes","length","child","longLine","shortLine","update","dt","speed","getPosition","a","Math","PI","x","cos","center","y","sin","setPosition","rotate","getRotation","position","setRotationFromEuler","p1","p2","strictEquals","abs","atan"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Vec3, CCInteger } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('EllipseAutoScroll')\nexport class EllipseAutoScroll extends Component {\n    \n    @property([Node])\n    nodes : Node[] = [];\n    // 长轴长\n    @property(CCInteger)\n    longLine : number = 200;\n    // 短轴长\n    @property(CCInteger)\n    shortLine : number = 80;\n    @property(Vec3)\n    center : Vec3 = new Vec3(0, 0, 0);\n    @property(CCInteger)\n    speed : number = 2;\n    \n    angle : number = 0;\n    tempPos : Vec3 = new Vec3();\n\n    start () {\n        this.angle = 0;\n        this.initAngle()\n    }\n\n    initAngle () {\n        for (var i = 0; i < this.nodes.length; i++) {\n            var child = this.nodes[i]\n            var angle = (270-360/this.nodes.length*i+360)%360;\n            (child as any)['_a'] = this.longLine;\n            (child as any)['_b'] = this.shortLine;\n            (child as any)['_angle'] = angle;\n        }\n    }\n\n    update (dt : number){\n        this.angle = (this.angle+this.speed)%360\n\n        for (var i = 0; i < this.nodes.length; i++) {\n            var child = this.nodes[i];\n            this.tempPos = child.getPosition();\n            let angle = ((child as any)['_angle'] + this.angle+360)%360;\n\n            var a = angle*Math.PI/180\n            var x = (child as any)['_a']*Math.cos(a)+this.center.x;\n            var y = (child as any)['_b']*Math.sin(a)+this.center.y;\n            this.tempPos.x = x;\n            this.tempPos.y = y;\n            child.setPosition(this.tempPos);\n            let rotate = 360 - this.getRotation(child.position, new Vec3(x, y, 0))*180/ Math.PI;\n            child.setRotationFromEuler(0, rotate, 0);\n        }\n    }\n\n    getRotation (p1: Vec3, p2: Vec3) {\n        if (p1.strictEquals(p2)) {\n            return 0;\n        }\n        if (p1.x == p2.x) {\n            return p2.y > p1.y ? Math.PI/2 : Math.PI\n        }\n        var a = Math.abs(Math.atan((p2.y-p1.y)/(p2.x-p1.x)))\n        if (p2.x < p1.x) {\n            if(p2.y >p1.y){\n                a = Math.PI - a;\n            } else {\n                a = Math.PI + a;\n            }\n        } else if(p2.y < p1.y) {\n            a = Math.PI*2 - a\n        }\n        return a;\n    }\n}\n"]}