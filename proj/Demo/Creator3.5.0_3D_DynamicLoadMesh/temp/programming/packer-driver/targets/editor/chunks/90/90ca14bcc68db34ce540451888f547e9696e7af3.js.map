{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.0_3D_DynamicLoadMesh/assets/DynamicLoadMesh.ts"],"names":["_decorator","Component","assetManager","MeshRenderer","Node","Prefab","Label","ccclass","property","DynamicLoadMesh","_prefabMeshUUIDS","_prefabMeshNames","start","initConfig","testPrefab","prefab","prefabData","data","prefabChildren","children","prefabChildrenCount","length","i","node","name","push","mesh","getComponent","meshUUID","onClickRandom","index","Math","round","random","uuid","console","log","loadAny","err","uuidLabel","string","nameLabel","testNode"],"mappings":";;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,I,OAAAA,I;AAAYC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,K,OAAAA,K;;;;;;;OAC1E;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;yBAGTS,e,WADpBF,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ,CAACJ,IAAD,C,UAERI,QAAQ,CAACH,MAAD,C,UAERG,QAAQ,CAACF,KAAD,C,UAERE,QAAQ,CAACF,KAAD,C,2BATb,MACqBG,eADrB,SAC6CR,SAD7C,CACuD;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAWnDS,gBAXmD,GAWrB,EAXqB;AAAA,eAYnDC,gBAZmD,GAYrB,EAZqB;AAAA;;AAYjB;AAElCC,QAAAA,KAAK,GAAI;AACL,eAAKC,UAAL;AACH;;AAEDA,QAAAA,UAAU,GAAI;AACV,cAAI,KAAKC,UAAT,EAAqB;AACjB,kBAAMC,MAAM,GAAG,KAAKD,UAApB;AACA,kBAAME,UAAU,GAAGD,MAAM,CAACE,IAA1B,CAFiB,CAEe;;AAChC,gBAAI,CAACD,UAAL,EAAiB;AACjB,kBAAME,cAAc,GAAGF,UAAU,CAACG,QAAlC,CAJiB,CAI2B;;AAC5C,kBAAMC,mBAAmB,GAAGF,cAAc,CAACG,MAA3C;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,mBAApB,EAAyCE,CAAC,EAA1C,EAA8C;AAC1C,oBAAMC,IAAI,GAAGL,cAAc,CAACI,CAAD,CAA3B;AACA,oBAAME,IAAI,GAAGD,IAAI,CAACC,IAAlB,CAF0C,CAI1C;;AACA,kBAAGA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,cAA/B,EAA8C,CAE7C,CAFD,MAEO;AACH,qBAAKb,gBAAL,CAAsBc,IAAtB,CAA2BD,IAA3B;;AAEA,sBAAME,IAAI,GAAGH,IAAI,CAACI,YAAL,CAAkBxB,YAAlB,EAAiCuB,IAA9C;AACA,sBAAME,QAAQ,GAAGF,IAAI,CAAC,OAAD,CAArB;;AACA,qBAAKhB,gBAAL,CAAsBe,IAAtB,CAA2BG,QAA3B;AACH,eAbyC,CAe1C;;AACH;AACJ;AACJ;;AAEDC,QAAAA,aAAa,GAAI;AACb,cAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAKvB,gBAAL,CAAsBW,MAAtB,GAA+B,CAAhD,CAAX,CAAZ;AACA,gBAAMa,IAAI,GAAG,KAAKxB,gBAAL,CAAsBoB,KAAtB,CAAb;AACA,gBAAMN,IAAI,GAAG,KAAKb,gBAAL,CAAsBmB,KAAtB,CAAb;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA5B,UAAAA,YAAY,CAACmC,OAAb,CAAqBH,IAArB,EAA2B,CAACI,GAAD,EAAWZ,IAAX,KAA0B;AACjD,gBAAIY,GAAJ,EAAQ;AACJH,cAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA;AACH;;AAED,iBAAKC,SAAL,CAAeC,MAAf,GAAwB,cAAcN,IAAtC;AACA,iBAAKO,SAAL,CAAeD,MAAf,GAAwB,cAAchB,IAAtC;AACA,iBAAKkB,QAAL,CAAcf,YAAd,CAA2BxB,YAA3B,EAA0CuB,IAA1C,GAAiDA,IAAjD;AACH,WATD;AAUH;;AA5DkD,O","sourcesContent":["\nimport { _decorator, Component, assetManager, MeshRenderer, Node, Mesh, Prefab, Label } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('DynamicLoadMesh')\nexport default class DynamicLoadMesh extends Component {\n\n    @property(Node)\n    testNode !: Node;\n    @property(Prefab)\n    testPrefab !: Prefab;\n    @property(Label)\n    uuidLabel !: Label;\n    @property(Label)\n    nameLabel !: Label;\n\n    _prefabMeshUUIDS : string[] = []; // 记录FBX模型的mesh的uuid\n    _prefabMeshNames : string[] = []; // 记录FBX模型的mesh的name\n\n    start () {\n        this.initConfig();\n    }\n\n    initConfig () {\n        if (this.testPrefab) {\n            const prefab = this.testPrefab\n            const prefabData = prefab.data; // 获取到预制体的data数据\n            if (!prefabData) return;\n            const prefabChildren = prefabData.children; // 获取到预制体的子节点数组\n            const prefabChildrenCount = prefabChildren.length;\n            for (let i = 0; i < prefabChildrenCount; i++) {\n                const node = prefabChildren[i];\n                const name = node.name;\n\n                // 手动剔除一些无用的 mesh\n                if(name === 'Dice' || name === 'Dragon_Blank'){\n\n                } else {\n                    this._prefabMeshNames.push(name);\n\n                    const mesh = node.getComponent(MeshRenderer)!.mesh;\n                    const meshUUID = mesh['_uuid'];\n                    this._prefabMeshUUIDS.push(meshUUID);\n                }\n                \n                // console.log(name,meshUUID);\n            }\n        }\n    }\n\n    onClickRandom () {\n        let index = Math.round(Math.random() * (this._prefabMeshUUIDS.length - 1));\n        const uuid = this._prefabMeshUUIDS[index];\n        const name = this._prefabMeshNames[index];\n        console.log(index);\n        assetManager.loadAny(uuid, (err: any, mesh: Mesh) => {\n            if (err){\n                console.log(err);\n                return;\n            }\n\n            this.uuidLabel.string = '当前的UUID是:' + uuid;\n            this.nameLabel.string = '当前的Mesh是:' + name;\n            this.testNode.getComponent(MeshRenderer)!.mesh = mesh;\n        })\n    }\n}\n"]}