{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.0_3D_ObjectIsInCameraView/assets/IsInViewTest.ts"],"names":["_decorator","Component","Node","Camera","Vec3","view","Quat","ccclass","property","IsInViewTest","dir","update","rotationAroundNode","capsuleSelf","cubeSelf","position","UP","lookAt","torusSelf","RIGHT","IsInView","worldPosition","console","log","self","pos","axis","angle","_quat","v1","v2","pos2","rad","Math","PI","fromAxisAngle","subtract","transformQuat","add","rotateAround","rotation","worldPos","cameraPos","mainCameraSelf","node","getWorldPosition","viewPos","worldToScreen","normalize","forward","dot","viewportRect","getViewportRect","x","width","y","height"],"mappings":";;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,I,OAAAA,I;AAAmBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;;;;;;;OACjE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;8BAGjBS,Y,WADZF,OAAO,CAAC,cAAD,C,UAEHC,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACL,MAAD,C,UAGRK,QAAQ,CAACN,IAAD,C,2BAdb,MACaO,YADb,SACkCR,SADlC,CAC4C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAgBxCS,GAhBwC,GAgB3B,IAAIN,IAAJ,EAhB2B;AAAA;;AAkBxCO,QAAAA,MAAM,GAAI;AAEN,eAAKC,kBAAL,CAAwB,KAAKC,WAA7B,EAA0C,KAAKC,QAAL,CAAcC,QAAxD,EAAkEX,IAAI,CAACY,EAAvE,EAA2E,CAA3E;AACA,eAAKH,WAAL,CAAiBI,MAAjB,CAAwB,KAAKH,QAAL,CAAcC,QAAtC;AAEA,eAAKH,kBAAL,CAAwB,KAAKM,SAA7B,EAAwC,KAAKJ,QAAL,CAAcC,QAAtD,EAAgEX,IAAI,CAACe,KAArE,EAA4E,CAA5E;AACA,eAAKD,SAAL,CAAeD,MAAf,CAAsB,KAAKH,QAAL,CAAcC,QAApC;;AAEA,cAAG,KAAKK,QAAL,CAAc,KAAKP,WAAL,CAAiBQ,aAA/B,CAAH,EAAiD;AAC7CC,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AAED,cAAG,KAAKH,QAAL,CAAc,KAAKF,SAAL,CAAeG,aAA7B,CAAH,EAA+C;AAC3CC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH;AACJ;;AAEDX,QAAAA,kBAAkB,CAACY,IAAD,EAAcC,GAAd,EAA0BC,IAA1B,EAAuCC,KAAvC,EAClB;AACI,cAAIC,KAAK,GAAC,IAAItB,IAAJ,EAAV;;AACA,cAAIuB,EAAE,GAAG,IAAIzB,IAAJ,EAAT;AACA,cAAI0B,EAAE,GAAG,IAAI1B,IAAJ,EAAT;AACA,cAAI2B,IAAS,GAAGP,IAAI,CAACT,QAArB;AACA,cAAIiB,GAAG,GAAGL,KAAK,GAAG,GAAR,GAAcM,IAAI,CAACC,EAA7B,CALJ,CAMI;;AACA5B,UAAAA,IAAI,CAAC6B,aAAL,CAAmBP,KAAnB,EAAyBF,IAAzB,EAA8BM,GAA9B,EAPJ,CAQI;;AACA5B,UAAAA,IAAI,CAACgC,QAAL,CAAcP,EAAd,EAAiBE,IAAjB,EAAsBN,GAAtB,EATJ,CAUI;;AACArB,UAAAA,IAAI,CAACiC,aAAL,CAAmBP,EAAnB,EAAsBD,EAAtB,EAAyBD,KAAzB;AACAJ,UAAAA,IAAI,CAACT,QAAL,GAAcX,IAAI,CAACkC,GAAL,CAASR,EAAT,EAAYL,GAAZ,EAAgBK,EAAhB,CAAd,CAZJ,CAaI;;AACAxB,UAAAA,IAAI,CAACiC,YAAL,CAAkBX,KAAlB,EAAwBJ,IAAI,CAACgB,QAA7B,EAAsCd,IAAtC,EAA2CM,GAA3C;AACA,iBAAOJ,KAAP;AACH;;AAGDR,QAAAA,QAAQ,CAACqB,QAAD,EAAiB;AACrB,cAAIC,SAAS,GAAG,KAAKC,cAAL,CAAoBC,IAApB,CAAyBC,gBAAzB,EAAhB;AACA,gBAAMC,OAAO,GAAG,KAAKH,cAAL,CAAoBI,aAApB,CAAkCN,QAAlC,CAAhB;AACArC,UAAAA,IAAI,CAAC4C,SAAL,CAAe,KAAKtC,GAApB,EAAyB+B,QAAQ,CAACL,QAAT,CAAkBM,SAAlB,CAAzB;AACA,gBAAMO,OAAO,GAAG,KAAKN,cAAL,CAAoBC,IAApB,CAAyBK,OAAzC;AACA,cAAIC,GAAG,GAAG9C,IAAI,CAAC8C,GAAL,CAASD,OAAT,EAAkB,KAAKvC,GAAvB,CAAV;AAEA,gBAAMyC,YAAY,GAAG9C,IAAI,CAAC+C,eAAL,EAArB,CAPqB,CASrB;;AACA,cAAIF,GAAG,GAAG,CAAN,CACA;AADA,aAEIJ,OAAO,CAACO,CAAR,IAAaF,YAAY,CAACG,KAF9B,IAEyCR,OAAO,CAACO,CAAR,IAAa,CAFtD,IAGIP,OAAO,CAACS,CAAR,IAAaJ,YAAY,CAACK,MAH9B,IAG0CV,OAAO,CAACS,CAAR,IAAa,CAH3D,EAII,OAAO,IAAP,CAJJ,KAMI,OAAO,KAAP;AACP;;AAxEuC,O","sourcesContent":["\nimport { _decorator, Component, Node, Camera, Vec3, UITransform, view, Quat, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('IsInViewTest')\nexport class IsInViewTest extends Component {\n    @property(Node)\n    capsuleSelf !: Node;\n\n    @property(Node)\n    cubeSelf !: Node;\n\n    @property(Node)\n    torusSelf !: Node;\n\n    @property(Camera)\n    mainCameraSelf !: Camera;\n\n    @property(Node)\n    nodeSelf !: Node;\n\n    dir : Vec3 = new Vec3();\n\n    update () {\n\n        this.rotationAroundNode(this.capsuleSelf, this.cubeSelf.position, Vec3.UP, 1);\n        this.capsuleSelf.lookAt(this.cubeSelf.position);\n\n        this.rotationAroundNode(this.torusSelf, this.cubeSelf.position, Vec3.RIGHT, 1);\n        this.torusSelf.lookAt(this.cubeSelf.position);\n        \n        if(this.IsInView(this.capsuleSelf.worldPosition)){\n            console.log(\"Capsule is in view\");\n        }\n\n        if(this.IsInView(this.torusSelf.worldPosition)){\n            console.log(\"Torus is in view\");\n        }\n    }\n\n    rotationAroundNode(self : Node, pos : Vec3, axis : Vec3, angle : number) :Quat\n    {\n        let _quat=new Quat();\n        let v1 = new Vec3();\n        let v2 = new Vec3();\n        let pos2:Vec3 = self.position;\n        let rad = angle / 180 * Math.PI;\n        //根据旋转轴和旋转弧度计算四元数\n        Quat.fromAxisAngle(_quat,axis,rad);\n        //相减，目标点与相机点之间的向量\n        Vec3.subtract(v1,pos2,pos);\n        //把向量dir根据计算到的四元数旋转，然后计算出旋转后的距离\n        Vec3.transformQuat(v2,v1,_quat);\n        self.position=Vec3.add(v2,pos,v2);\n        //根据轴和弧度绕世界空间下指定轴旋转四元数\n        Quat.rotateAround(_quat,self.rotation,axis,rad);\n        return _quat;\n    }\n\n\n    IsInView(worldPos: Vec3) {\n        var cameraPos = this.mainCameraSelf.node.getWorldPosition();\n        const viewPos = this.mainCameraSelf.worldToScreen(worldPos);\n        Vec3.normalize(this.dir, worldPos.subtract(cameraPos));\n        const forward = this.mainCameraSelf.node.forward;\n        var dot = Vec3.dot(forward, this.dir); \n\n        const viewportRect = view.getViewportRect();\n        \n        //判断物体是否在相机前面\n        if (dot > 0\n            // 判断物体是否在视窗内\n            && (viewPos.x <= viewportRect.width) && (viewPos.x >= 0)\n            && (viewPos.y <= viewportRect.height) && (viewPos.y >= 0))\n            return true;\n        else\n            return false;\n    }\n}\n"]}