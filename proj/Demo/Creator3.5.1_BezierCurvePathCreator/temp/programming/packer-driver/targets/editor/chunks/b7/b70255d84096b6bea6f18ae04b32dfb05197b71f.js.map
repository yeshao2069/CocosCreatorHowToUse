{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.1_BezierCurvePathCreator/assets/scripts/Bezier.ts"],"names":["Bezier","_decorator","ccclass","property","_pointArr","_runTime","_pointLists","_totalLength","_previousPos","_currentRunTime","init","pointArr","allTime","resetData","pos","position","x","y","length","factorial","i","n","j","ComputeBezier","dt","runTime","t","forEach","item","index","itemPos","Math","pow","sqrt","v2","push","getPoints","count","len","getCurveLength"],"mappings":";;;6BAIaA,M;;;;;;;AAJJC,MAAAA,U,OAAAA,U;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBF,U;AAE9BC,MAAAA,OAAO,CAAC,QAAD,CAAP;;wBACaF,M,GAAN,MAAMA,MAAN,CAAY;AAAA;AAAA,eAEfI,SAFe,GAEM,EAFN;AAAA,eAIfC,QAJe,GAIK,CAJL;AAAA,eAMfC,WANe,GAMO,EANP;AAAA,eAQfC,YARe,GAQS,CART;AAAA,eAUfC,YAVe,GAUM,EAVN;AAAA,eAYfC,eAZe,GAYY,CAZZ;AAAA;;AAcfC,QAAAA,IAAI,CAAEC,QAAF,EAAoBC,OAAe,GAAG,CAAtC,EAAwC;AACxC,eAAKR,SAAL,GAAiBO,QAAjB;AACA,eAAKN,QAAL,GAAgBO,OAAhB;AACH,SAjBc,CAmBf;;;AACAC,QAAAA,SAAS,GAAI;AACT,eAAKP,WAAL,GAAmB,EAAnB;AACA,eAAKC,YAAL,GAAoB,CAApB;AACA,eAAKE,eAAL,GAAuB,CAAvB;AACA,cAAIK,GAAG,GAAI,KAAKV,SAAL,CAAe,CAAf,CAAD,CAA2BW,QAArC;AACA,eAAKP,YAAL,GAAoB;AAChBQ,YAAAA,CAAC,EAAGF,GAAG,CAACE,CADQ;AAEhBC,YAAAA,CAAC,EAAGH,GAAG,CAACG,CAFQ;AAGhBC,YAAAA,MAAM,EAAG;AAHO,WAApB;AAKH,SA9Bc,CAgCf;;;AACAC,QAAAA,SAAS,CAAEC,CAAF,EAAa;AAClB,cAAIC,CAAC,GAAG,CAAR;;AACA,eAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAEF,CAAjB,EAAoBE,CAAC,EAArB,EAAyB;AACrBD,YAAAA,CAAC,IAAIC,CAAL;AACH;;AACD,iBAAOD,CAAP;AACH;;AAEDE,QAAAA,aAAa,CAAEC,EAAF,EAAcC,OAAd,EAA+B;AACxC;AACA,cAAIC,CAAC,GAAG,KAAKjB,eAAL,GAAuBgB,OAA/B;AAEA,cAAIT,CAAC,GAAG,CAAR;AAAA,cAAWC,CAAC,GAAG,CAAf,CAJwC,CAKxC;;AACA,cAAII,CAAC,GAAG,KAAKjB,SAAL,CAAec,MAAf,GAAwB,CAAhC;;AAEA,eAAKd,SAAL,CAAeuB,OAAf,CAAuB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC,gBAAIC,OAAO,GAAIF,IAAD,CAAcb,QAA5B;;AACA,gBAAI,CAACc,KAAL,EAAY;AACRb,cAAAA,CAAC,IAAIc,OAAO,CAACd,CAAR,GAAYe,IAAI,CAACC,GAAL,CAAU,IAAIN,CAAd,EAAkBL,CAAC,GAAGQ,KAAtB,CAAZ,GAA2CE,IAAI,CAACC,GAAL,CAASN,CAAT,EAAYG,KAAZ,CAAhD;AACAZ,cAAAA,CAAC,IAAIa,OAAO,CAACb,CAAR,GAAYc,IAAI,CAACC,GAAL,CAAU,IAAIN,CAAd,EAAkBL,CAAC,GAAGQ,KAAtB,CAAZ,GAA2CE,IAAI,CAACC,GAAL,CAASN,CAAT,EAAYG,KAAZ,CAAhD;AACH,aAHD,MAGO;AACH;AACAb,cAAAA,CAAC,IAAI,KAAKG,SAAL,CAAeE,CAAf,IAAoB,KAAKF,SAAL,CAAeU,KAAf,CAApB,GAA4C,KAAKV,SAAL,CAAeE,CAAC,GAAGQ,KAAnB,CAA5C,GAAwEC,OAAO,CAACd,CAAhF,GAAoFe,IAAI,CAACC,GAAL,CAAU,IAAIN,CAAd,EAAkBL,CAAC,GAAGQ,KAAtB,CAApF,GAAmHE,IAAI,CAACC,GAAL,CAASN,CAAT,EAAYG,KAAZ,CAAxH;AACAZ,cAAAA,CAAC,IAAI,KAAKE,SAAL,CAAeE,CAAf,IAAoB,KAAKF,SAAL,CAAeU,KAAf,CAApB,GAA4C,KAAKV,SAAL,CAAeE,CAAC,GAAGQ,KAAnB,CAA5C,GAAwEC,OAAO,CAACb,CAAhF,GAAoFc,IAAI,CAACC,GAAL,CAAU,IAAIN,CAAd,EAAkBL,CAAC,GAAGQ,KAAtB,CAApF,GAAmHE,IAAI,CAACC,GAAL,CAASN,CAAT,EAAYG,KAAZ,CAAxH;AACH;AACJ,WAVD,EARwC,CAoBxC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AACA,cAAIX,MAAM,GAAGa,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACC,GAAL,CAAS,KAAKxB,YAAL,CAAkBQ,CAAlB,GAAsBA,CAA/B,EAAkC,CAAlC,IAAuCe,IAAI,CAACC,GAAL,CAAS,KAAKxB,YAAL,CAAkBS,CAAlB,GAAsBA,CAA/B,EAAkC,CAAlC,CAAjD,CAAb;AACA,cAAIiB,EAAE,GAAG;AACLlB,YAAAA,CAAC,EAAGA,CADC;AAELC,YAAAA,CAAC,EAAGA,CAFC;AAGLC,YAAAA,MAAM,EAAGA;AAHJ,WAAT,CAhCwC,CAoCxC;;AACA,eAAKZ,WAAL,CAAiB6B,IAAjB,CAAsBD,EAAtB;;AACA,eAAK1B,YAAL,GAAoB0B,EAApB,CAtCwC,CAuCxC;;AACA,eAAK3B,YAAL,IAAqBW,MAArB,CAxCwC,CAyCxC;;AACA,eAAKT,eAAL,IAAwBe,EAAxB;AACH,SApFc,CAsFf;;;AACAY,QAAAA,SAAS,CAAEC,KAAK,GAAG,GAAV,EAAe;AACpB,eAAKxB,SAAL,GADoB,CAEpB;;AACA,cAAIW,EAAE,GAAG,KAAKnB,QAAL,GAAgBgC,KAAzB,CAHoB,CAIpB;;AACA,eAAK,IAAIjB,CAAC,GAAG,CAAR,EAAWkB,GAAG,GAAGD,KAAK,GAAG,CAA9B,EAAiCjB,CAAC,GAAGkB,GAArC,EAA0ClB,CAAC,EAA3C,EAA+C;AAC3C,iBAAKG,aAAL,CAAmBC,EAAnB,EAAuB,KAAKnB,QAA5B;AACH;;AACD,iBAAO,KAAKC,WAAZ;AACH;;AAEDiC,QAAAA,cAAc,GAAI;AACd,iBAAO,KAAKhC,YAAZ;AACH;;AApGc,O","sourcesContent":["import { _decorator, Vec2 } from 'cc';\nconst { ccclass, property } = _decorator;\n\nccclass('Bezier')\nexport class Bezier{\n\n    _pointArr : Vec2[] = [];\n    // 运行时间\n    _runTime : number = 0;\n    // 曲线点集合\n    _pointLists : any[] = [];\n    // 曲线总长\n    _totalLength : number = 0;\n    // 上一个点\n    _previousPos : any = {};\n    // 当前时间\n    _currentRunTime : number = 0;\n\n    init (pointArr: Vec2[], allTime: number = 2){\n        this._pointArr = pointArr;\n        this._runTime = allTime;\n    }\n\n    // 重置数据\n    resetData () {\n        this._pointLists = [];\n        this._totalLength = 0;\n        this._currentRunTime = 0;\n        let pos = (this._pointArr[0] as any).position\n        this._previousPos = {\n            x : pos.x, \n            y : pos.y,\n            length : 0,\n        };\n    }\n\n    // 阶乘\n    factorial (i: number) {\n        let n = 1;\n        for (let j=1; j<=i; j++) {\n            n *= j;\n        }\n        return n;\n    }\n\n    ComputeBezier (dt: number, runTime: number) {\n        // 把时间从 [0,runTime] 映射到 [0,1] 之间\n        let t = this._currentRunTime / runTime;\n\n        var x = 0, y = 0;\n        //控制点数组\n        var n = this._pointArr.length - 1;\n\n        this._pointArr.forEach((item, index) => {\n            let itemPos = (item as any).position;\n            if (!index) {\n                x += itemPos.x * Math.pow((1 - t), n - index) * Math.pow(t, index)\n                y += itemPos.y * Math.pow((1 - t), n - index) * Math.pow(t, index)\n            } else {\n                //factorial为阶乘函数\n                x += this.factorial(n) / this.factorial(index) / this.factorial(n - index) * itemPos.x * Math.pow((1 - t), n - index) * Math.pow(t, index)\n                y += this.factorial(n) / this.factorial(index) / this.factorial(n - index) * itemPos.y * Math.pow((1 - t), n - index) * Math.pow(t, index)\n            }\n        })\n\n        //  // 二阶贝塞尔曲线公式 (t => [0,1]) \n        //  var x = Math.pow(1 - t, 2) * _startPos.x\n        //  + 2 * t * (1 - t) * _controlPos.x\n        //  + Math.pow(t, 2) * _endPos.x;\n         \n        //  var y = Math.pow(1 - t, 2) * _startPos.y\n        //  + 2 * t * (1 - t) * _controlPos.y\n        //  + Math.pow(t, 2) * _endPos.y;\n\n        // console.log(`x:${x},y:${y}`);\n        // 计算两点距离\n        let length = Math.sqrt(Math.pow(this._previousPos.x - x, 2) + Math.pow(this._previousPos.y - y, 2));\n        let v2 = { \n            x : x, \n            y : y,\n            length : length };\n        // 存储当前节点\n        this._pointLists.push(v2);\n        this._previousPos = v2;\n        // 累计长度\n        this._totalLength += length;\n        // 累计时间\n        this._currentRunTime += dt;\n    }\n\n    // 切割贝塞尔曲线\n    getPoints (count = 200) {\n        this.resetData();\n        // 分割时间\n        let dt = this._runTime / count;\n        // 开始分割曲线\n        for (var i = 0, len = count + 1; i < len; i++) {\n            this.ComputeBezier(dt, this._runTime);\n        }\n        return this._pointLists;\n    }\n\n    getCurveLength () {\n        return this._totalLength;\n    }\n}"]}