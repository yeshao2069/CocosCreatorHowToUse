{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.1_BezierCurvePathCreator/assets/scripts/BezierData.ts"],"names":["BezierData","_decorator","instantiate","Label","Node","Vec3","Bezier","Ident","ccclass","property","_bezierCurveLists","_bezierCurveData","time","length","points","_pointCurveDict","Map","_PointNum","_currentBezierType","_pointCount","_resolution","width","height","init","point","control","parent","clearAllBezier","_pointPrefab","_controlPrefab","_pointParent","initRandCurve","setPointCount","num","setBezierCurveType","type","getBezierCurveType","setDeleteTarget","node","_deleteTarget","addBezierCurve","curve","push","getBezierCurveLists","getBezierCurveData","setBezierCurveRunTime","isLastCurve","getResolution","setResolution","createCurve","pos","end","createPoint","start","saveToPointCurveDict","console","log","createThirdOrderCurve","control2","c1pos","add","position","x","Math","min","y","control1","obj","key","has","get","set","deletePoint","location","getPointLocation","deleteCenterPoint","deleteStartPoint","deleteEndPoint","saveBezierPath","i","len","bezier","bezierCurve","Object","values","getPoints","curveLength","getCurveLength","forEach","destroy","clear","ident","isSelect","name","window","setMoveTargetNode","count","setPosition","addPointDeleteEvents","addDragEvents","z","addComponent","string","toString","getRandPos","randX","random","randY","curveObj","warn","CurveObj","prevCurve","endCurve","nextCurve","startCurve","prevEndCurveObj","delete","_point","deleteCurveFromBezierLists","endCurveObj","startCurveObj","_curve","splice"],"mappings":"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","sourcesContent":["import { _decorator, Vec2, instantiate, Label, Prefab, Node, view, Vec3 } from 'cc';\nimport { Bezier } from './Bezier';\nimport { Ident } from './Enums';\nconst { ccclass, property } = _decorator;\n\nccclass('BezierData')\nexport class BezierData {\n    // point预制体\n    _pointPrefab !: Prefab;\n    _controlPrefab !: Prefab;\n    // 贝塞尔曲线列表\n    _bezierCurveLists : any[] = [];\n    // 曲线点列表\n    _bezierCurveData : any = {\n        time: 2,//运行总时长\n        length: 0,//曲线总长\n        points: [],//曲线点列表\n    }\n    // 点 - 曲线 字典\n    _pointCurveDict = new Map();\n    // 需要删除的目标节点\n    _deleteTarget !: Node;\n    // 点计数\n    _PointNum = 0;\n    // 父节点\n    _pointParent !: Node;\n    // 曲线类型\n    _currentBezierType : number = 2;\n    // 每段曲线的切割分数\n    _pointCount : number = 100;\n    // 画板分辨率\n    _resolution = {\n        width: 1280,\n        height: 720\n    }\n\n    // 初始化\n    init (point: Prefab, control: Prefab, parent: Node) {\n        this.clearAllBezier()\n        this._pointPrefab = point;\n        this._controlPrefab = control;\n        this._pointParent = parent;\n        this.initRandCurve();\n    }\n\n    // 设置曲线切割份数\n    setPointCount (num: number) {\n        this._pointCount = num;\n    }\n    // 设置曲线类型\n    setBezierCurveType (type: number) {\n        this._currentBezierType = type;\n    }\n    // 获取曲线类型\n    getBezierCurveType () {\n        return this._currentBezierType;\n    }\n    // 设置删除的目标节点\n    setDeleteTarget (node: Node) {\n        this._deleteTarget = node;\n    }\n    // 添加贝塞尔曲线到列表\n    addBezierCurve (curve: any) {\n        this._bezierCurveLists.push(curve);\n    }\n    // 获取贝塞尔曲线列表\n    getBezierCurveLists () {\n        return this._bezierCurveLists;\n    }\n    // 获取贝塞尔曲线数据\n    getBezierCurveData () {\n        return this._bezierCurveData;\n    }\n    // 设置贝塞尔曲线运行时长\n    setBezierCurveRunTime (time: number) {\n        this._bezierCurveData.time = time;\n    }\n    // 是否是最后一个曲线\n    isLastCurve () {\n        return this._bezierCurveLists.length <= 1;\n    }\n\n    // 获取分辨率\n    getResolution () {\n        return this._resolution;\n    }\n\n    // 设置分辨率\n    setResolution (width: number, height: number) {\n        this._resolution = {\n            width : width,\n            height : height,\n        };\n        return this._resolution;\n    }\n\n    // 创建二阶贝塞尔曲线\n    createCurve (pos: Vec3) {\n        let end = this.createPoint(Ident.point, pos);\n        let control = this.createPoint(Ident.control, pos);\n        // 把曲线列表最后一个点作为新曲线起点\n        let start = this._bezierCurveLists[this._bezierCurveLists.length - 1].end;\n        let curve = { start, control, end }\n        this._bezierCurveLists.push(curve);\n        this.saveToPointCurveDict(curve);\n        console.log(\"bezierLists->\", this._bezierCurveLists)\n    }\n\n    // 创建三阶贝塞尔曲线\n    createThirdOrderCurve (pos: Vec3) {\n        // 把曲线列表最后一个点作为新曲线起点\n        let start = this._bezierCurveLists[this._bezierCurveLists.length - 1].end;\n        let end = this.createPoint(Ident.point, pos);\n        let control2 = this.createPoint(Ident.control, pos);\n        //计算偏移点\n        let c1pos = new Vec3(200, 200, 0).add(start.position);\n        c1pos.x = Math.min(this._resolution.width/2, c1pos.x);\n        c1pos.y = Math.min(this._resolution.height/2, c1pos.y);\n        let control1 = this.createPoint(Ident.control, c1pos, false);\n\n        let curve = { start, control1, control2, end }\n        this._bezierCurveLists.push(curve);\n        this.saveToPointCurveDict(curve);\n        console.log(\"bezierLists->\", this._bezierCurveLists)\n    }\n\n    // 存储到曲线字典\n    // key - 点, value - 该点所关联的曲线对象Obj, \n    // 曲线对象Obj: start字段 为 该点作为起点所在的曲线,  control end类似\n    saveToPointCurveDict (curve: any) {\n        let obj;\n        for (const key in curve) {\n            const point = curve[key];\n            if (this._pointCurveDict.has(point)) {\n                obj = this._pointCurveDict.get(point);\n            } else {\n                obj = {};\n            }\n            obj[key + \"Curve\"] = curve;\n            this._pointCurveDict.set(point, obj);\n        }\n        console.log(\"pointCurveDict\", this._pointCurveDict);\n    }\n\n    // 删除节点\n    deletePoint () {\n        if (this._pointCurveDict.has(this._deleteTarget)) {\n            let location = this.getPointLocation(this._deleteTarget)\n            if (location == \"center\") {\n                this.deleteCenterPoint(this._deleteTarget);\n            } else if (location == \"start\") {\n                this.deleteStartPoint(this._deleteTarget);\n            } else if (location == \"end\") {\n                this.deleteEndPoint(this._deleteTarget);\n            }\n        }\n    }\n\n    // 保存路径\n    saveBezierPath () {\n        this._bezierCurveData.length = 0;\n        this._bezierCurveData.points = [];\n        console.log(\"保存路径bezierLists\", this._bezierCurveLists);\n        for (var i = 0, len = this._bezierCurveLists.length; i < len; i++) {\n            const bezier = this._bezierCurveLists[i];\n            // 创建一个贝塞尔曲线\n            // let bezierCurve = new Bezier(bezier.start, bezier.control, bezier.end, 100);\n            // console.log(\"consscscds\", Object.values(bezier));\n\n            let bezierCurve = new Bezier();\n            bezierCurve.init((Object as any).values(bezier), 2);\n\n            // 获取曲线点\n            let points = bezierCurve.getPoints(this._pointCount);\n            console.log(\"consscscds\", this._pointCount);\n\n            // 获取曲线长度\n            let curveLength = bezierCurve.getCurveLength();\n            // 计算路程长度\n            this._bezierCurveData.length += curveLength;\n            // 存储曲线点\n            (this._bezierCurveData.points as any[]).push(...points);\n            // console.log(\"points\", points);\n        }\n        console.log(\"保存路径bezierCurveData\", this._bezierCurveData);\n        console.log(\"保存路径pointCurveDict->\", this._pointCurveDict)\n    }\n\n    // 情况所有曲线\n    clearAllBezier () {\n        console.log(\"clearAllBezier\");\n\n        this._bezierCurveLists = [];\n        this._pointCurveDict.forEach((curve,point) => {\n            if (point)\n                point.destroy();\n        })\n        this._pointCurveDict.clear();\n    }\n\n    // 创建新节点\n    createPoint (ident: number, pos : any, isSelect = true) {\n        let node;\n        let name;\n        if (ident == Ident.point) {\n            node = instantiate(this._pointPrefab);\n            (node as any).ident = Ident.point;\n            name = \"point\";\n        } else if (ident == Ident.control) {\n            node = instantiate(this._controlPrefab);\n            (node as any).ident = Ident.control;\n            name = \"control\";\n            if (isSelect) window['NodeEvents'].setMoveTargetNode(node);\n        }\n        let count = this._PointNum++;\n        node = node as any;\n        node.name = name + \"_\" + count;\n        node.parent = this._pointParent;\n        node.setPosition(pos);\n        window['NodeEvents'].addPointDeleteEvents(node);\n        window['NodeEvents'].addDragEvents(node);\n        // 创建编号\n        let num = new Node();\n        num.parent = node;\n        num.setPosition(num.position.x, 20, num.position.z);\n        num.addComponent(Label).string = count.toString();\n        return node;\n    }\n\n    getRandPos () {\n        let randX = Math.random() * this._resolution.width - this._resolution.width * 0.5;\n        let randY = Math.random() * this._resolution.height - this._resolution.height * 0.5;\n        return new Vec3(randX, randY, 0);\n    }\n    // 初始化一个随机曲线\n    initRandCurve () {\n        let start = this.createPoint(Ident.point, this.getRandPos());\n        let control = this.createPoint(Ident.control, this.getRandPos());\n        let end = this.createPoint(Ident.point, this.getRandPos());\n        window['NodeEvents'].setMoveTargetNode(null);\n        let bezier = { start, control, end }\n        this.addBezierCurve(bezier);\n        this.saveToPointCurveDict(bezier);\n    }\n\n    // 判断该点是起点,终点或者中间点\n    getPointLocation (node: any) {\n        let curveObj = this._pointCurveDict.get(node);\n        if (curveObj) {\n            if (curveObj[\"startCurve\"] && curveObj[\"endCurve\"]) {\n                return \"center\";\n            }\n            if (curveObj[\"startCurve\"]) {\n                return \"start\";\n            }\n            if (curveObj[\"endCurve\"]) {\n                return \"end\";\n            }\n        }\n        return 0;\n    }\n\n    // 删除的是中间点\n    deleteCenterPoint (point: any) {\n        console.warn(\"删除的是中间点\");\n\n        if (this._pointCurveDict.has(point)) {\n            //中间点有前后两个曲线,删除该点就需要合并两个曲线（这里的方案是保留前面的曲线，删除后面的曲线）\n            let CurveObj = this._pointCurveDict.get(point);\n            let prevCurve = CurveObj.endCurve;\n            let nextCurve = CurveObj.startCurve;\n            // 把前一个曲线的终点移动到后一个曲线的终点上\n            prevCurve.end = nextCurve.end;\n            // 重新赋值该节点下的曲线对象的end曲线\n            let prevEndCurveObj = this._pointCurveDict.get(prevCurve.end);\n            prevEndCurveObj.endCurve = prevCurve;\n            this._pointCurveDict.delete(point);\n            // 删除后曲线相关的信息\n            for (const key in nextCurve) {\n                if (key == \"end\") continue;\n                const _point = nextCurve[key];\n                this._pointCurveDict.delete(_point)\n                _point.destroy();\n            }\n            // pointCurveDict.delete(nextCurve.start)\n            // pointCurveDict.delete(nextCurve.control)\n            // nextCurve.start.destroy();\n            // nextCurve.control.destroy();\n            this.deleteCurveFromBezierLists(nextCurve);\n        }\n    }\n    // 删除的是起点\n    deleteStartPoint (point: any) {\n        console.warn(\"删除的是起点\");\n\n        if (this._pointCurveDict.has(point)) {\n            //找到该点关联的曲线\n            let CurveObj = this._pointCurveDict.get(point);\n            let startCurve = CurveObj.startCurve;\n            CurveObj.endCurve = null;\n            // 删除曲线及其相关的点\n            let endCurveObj = this._pointCurveDict.get(startCurve.end);\n            endCurveObj.endCurve = null;\n            for (const key in startCurve) {\n                if (key == \"end\") continue;\n                const _point = startCurve[key];\n                this._pointCurveDict.delete(_point)\n                _point.destroy();\n            }\n            this.deleteCurveFromBezierLists(startCurve);\n        }\n    }\n    // 删除的是终点\n    deleteEndPoint (point: any) {\n        console.warn(\"删除的是终点\");\n        if (this._pointCurveDict.has(point)) {\n            let CurveObj = this._pointCurveDict.get(point);\n            let endCurve = CurveObj.endCurve;\n            CurveObj.startCurve = null;\n            // 删除曲线及其相关的点\n            let startCurveObj = this._pointCurveDict.get(endCurve.start);\n            startCurveObj.startCurve = null;\n            for (const key in endCurve) {\n                if (key == \"start\") continue;\n                const _point = endCurve[key];\n                this._pointCurveDict.delete(_point)\n                _point.destroy();\n            }\n            // pointCurveDict.delete(endCurve.control)\n            // endCurve.control.destroy();\n            this.deleteCurveFromBezierLists(endCurve);\n        }\n    }\n\n    // 从曲线列表删除曲线\n    deleteCurveFromBezierLists (curve: any) {\n        for (var i = 0, len = this._bezierCurveLists.length; i < len; i++) {\n            const _curve = this._bezierCurveLists[i];\n            if (_curve === curve) {\n                this._bezierCurveLists.splice(i, 1);\n                return ;\n            }\n        }\n    }\n}\n"]}