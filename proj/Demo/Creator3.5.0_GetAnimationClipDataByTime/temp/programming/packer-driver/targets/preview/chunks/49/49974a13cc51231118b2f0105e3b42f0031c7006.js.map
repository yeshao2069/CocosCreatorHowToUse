{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.0_GetAnimationClipDataByTime/assets/GetData.ts"],"names":["_decorator","Component","AnimationComponent","error","ccclass","property","GetData","start","data","getAnimationDataByTime","act1","console","log","get","data2","getAnimationDataByTimeExpand","act2","data3","act3","target","time","path","isAccurate","animClips","clips","clip1","timeSchedule","curveArray","curves","i","length","tempPath","tempAttribute","modifiers","val","values","temp","attribute","push","duration","parseFloat","j","_paths","split","_path","curveObj","Map","key","set","retData","forEach","v","k"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, AnimationComponent, error } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GetData')\nexport class GetData extends Component {\n\n    @property(AnimationComponent)\n    act1 : AnimationComponent = null!;\n    @property(AnimationComponent)\n    act2 : AnimationComponent = null!;\n    @property(AnimationComponent)\n    act3 : AnimationComponent = null!;\n\n    start () {\n        const data = this.getAnimationDataByTime(this.act1, 0, true);\n        if (data) {\n            // 获取pos\n            console.log(\"获取坐标 => \", data.get('position'));\n            // 获取rotation\n            console.log(\"获取角度 => \", data.get('rotation'));\n            // 获取scale\n            console.log(\"获取缩放 => \", data.get('scale'));\n        }\n\n        const data2 = this.getAnimationDataByTimeExpand(this.act2, 0.6);\n        if (data2) {\n            // 获取pos\n            // @ts-ignore\n            console.log(\"获取坐标 => \", data2['position']);\n        }\n\n        const data3 = this.getAnimationDataByTimeExpand(this.act3, 1, 'c1');\n        if (data2) {\n            // 获取pos\n            // @ts-ignore\n            console.log(\"获取坐标 => \", data3['position']);\n        }\n    }\n\n    /**\n     * 根据时间获取指定帧的数据\n     * @param target 动画组件Animation\n     * @param time 动画的时间  单位:秒\n     * @param path 获取具体的节点的名字  如  node/attend/box  输入 box 获取\n     * @param isAccurate 是否精确获取  true为精确  false为不需要精确\n     * 如动画时间1秒，中间分为4段(0,0.25,0.5,0.75,1)\n     * 如果使用精确模式，需要输入精确值0.5，可以获取0.5位置的属性信息，输入0.6那么获取的是null\n     * 如果使用不需要精确模式，输入精确值0.5获取的是0.5的信息，如果输入的是0.8，那么获取的是0.75的信息\n     * return a object\n     */\n     getAnimationDataByTimeExpand(target:AnimationComponent, \n        time: number, \n        path: string = null!,\n        isAccurate: boolean = false) {\n\n        // 适用于单个animationClip获取\n        const animClips = target.clips;\n        const clip1 = animClips[0];\n\n        // 适用于多个animationClip获取\n        // let animName1 = target.defaultClip!.name;\n        // let animState1 = target.getState(animName1);\n        // const clip2 = animState1.clip;\n\n        // let animName2 = 'Take 001';\n        // let animState2 = target.getState(animName2);\n        // const clip3 = animState2.clip;\n\n        // console.log(clip1,clip2,clip3);\n\n        console.log('当前动画的 name ==> ',(clip1 as any)['name']);\n        console.log('当前动画的 frameRate ==> ',(clip1 as any)['frameRate']);\n        console.log('当前动画的 sample ==> ',(clip1 as any)['sample']);\n        console.log('当前动画的 speed ==> ',(clip1 as any)['speed']);\n        console.log('当前动画的 wrapMode(循环模式) ==> ',(clip1 as any)['wrapMode']);\n        console.log('当前动画的 duration(总时长) ==> ',(clip1 as any)['duration']);\n\n        \n        // 时间 表\n        const timeSchedule = (clip1 as any)['keys'][0];\n        // 坐标/旋转角度/缩放 表\n        const curveArray = [];\n        const curves = (clip1 as any)['curves'];\n        for(let i = 0; i < curves.length; i++){\n            // curves[x].modifiers[1] 为 设置的属性\n            // curves[x].modifiers[0] 为 设置的路径，如果没有下一级的节点，那么该路径可以没有\n            // curves[x].data.values 为一个属性集合\n            let tempPath, tempAttribute;\n            if(curves[i].modifiers.length > 1){\n                tempPath = curves[i].modifiers[0].path;\n                tempAttribute = curves[i].modifiers[1];\n            } else {\n                tempPath = null;\n                tempAttribute = curves[i].modifiers[0];\n            }\n            const val = curves[i].data.values;\n\n            let temp = {\n                path : tempPath,\n                attribute : tempAttribute,\n                values : val\n            }\n            curveArray.push(temp);\n        }\n\n        console.log('当前动画的 keys ==> ',timeSchedule);\n        console.log('当前动画的 curves ==> ',(clip1 as any)['curves']);\n        console.log('当前动画的 属性表 ==> ',curveArray);\n\n        // 总时间\n        const duration = (clip1 as any)['duration'];\n        if (time <0 && time > parseFloat(duration)){\n            error(\"获取时间错误 or 设置时间超过时长\");\n            return null;\n        }\n\n        if (!timeSchedule) {\n            return null;\n        }\n        \n        if (isAccurate){\n            // 使用精确的方式\n            for(let i = 0; i < timeSchedule.length; i++){\n                if (timeSchedule[i] === time){\n                    let data = {};\n                    for(let j = 0; j < curveArray.length; j++){\n                        if(curveArray[j]['path'] == null!){\n                            // @ts-ignore\n                            data[curveArray[j]['attribute']] = curveArray[j]['values'][i];\n                        } else {\n                            let _paths = curveArray[j]['path'].split('/');\n                            let _path = _paths[_paths.length-1];\n                            if(_path == path){\n                                // @ts-ignore\n                                data[curveArray[j]['attribute']] = curveArray[j]['values'][i];\n                            }\n                        }\n                    }\n                    return data;\n                }\n            }\n        } else {\n            // 使用不精确的方式\n            for(let i = 0; i < timeSchedule.length; i++){\n                if (timeSchedule[i] >= time){\n                    let data = {};\n                    for(let j = 0; j < curveArray.length; j++){\n                        if(curveArray[j]['path'] == null!){\n                            // @ts-ignore\n                            data[curveArray[j]['attribute']] = curveArray[j]['values'][i];\n                        } else {\n                            let _paths = curveArray[j]['path'].split('/');\n                            let _path = _paths[_paths.length-1];\n                            if(_path == path){\n                                // @ts-ignore\n                                data[curveArray[j]['attribute']] = curveArray[j]['values'][i];\n                            }\n                        }\n                    }\n                    return data;\n                }\n            }\n        }\n\n        return null;\n    }\n\n\n    /**\n     * 根据时间获取指定帧的数据\n     * @param target 动画组件Animation\n     * @param time 动画的时间  单位:秒\n     * @param isAccurate 是否精确获取\n     * return map\n     */\n    getAnimationDataByTime (target:AnimationComponent,\n        time: number,\n        isAccurate: boolean = false) {\n\n        // 适用于单个animationClip获取\n        const animClips = target.clips;\n        const clip1 = animClips[0];\n\n        // 适用于多个animationClip获取\n        // let animName1 = target.defaultClip!.name;\n        // let animState1 = target.getState(animName1);\n        // const clip2 = animState1.clip;\n\n        // let animName2 = 'Take 001';\n        // let animState2 = target.getState(animName2);\n        // const clip3 = animState2.clip;\n\n        // console.log(clip1,clip2,clip3);\n\n        console.log('当前动画的 name ==> ',(clip1 as any)['name']);\n        console.log('当前动画的 frameRate ==> ',(clip1 as any)['frameRate']);\n        console.log('当前动画的 sample ==> ',(clip1 as any)['sample']);\n        console.log('当前动画的 speed ==> ',(clip1 as any)['speed']);\n        console.log('当前动画的 wrapMode(循环模式) ==> ',(clip1 as any)['wrapMode']);\n        console.log('当前动画的 duration(总时长) ==> ',(clip1 as any)['duration']);\n\n        \n        // 时间 表\n        const timeSchedule = (clip1 as any)['keys'][0];\n        // 坐标/旋转角度/缩放 表\n        const curveObj = new Map();\n        const curves = (clip1 as any)['curves'];\n        for(let i = 0; i < curves.length; i++){\n            // curves[x].modifiers[1] 为 设置的属性\n            // curves[x].modifiers[0] 为 设置的路径，如果没有下一级的节点，那么该路径可以没有\n            // curves[x].data.values 为一个属性集合\n            const key = curves[i].modifiers[curves[i].modifiers.length-1];\n            const val = curves[i].data.values;\n            curveObj.set(key, val);\n        }\n\n        console.log('当前动画的 keys ==> ',timeSchedule);\n        console.log('当前动画的 curves ==> ',(clip1 as any)['curves']);\n        console.log('当前动画的 属性表 ==> ',curveObj);\n\n        // 总时间\n        const duration = (clip1 as any)['duration'];\n        if (time <0 && time > parseFloat(duration)){\n            error(\"获取时间错误 or 设置时间超过时长\");\n            return null;\n        }\n\n        if (!timeSchedule) {\n            return null;\n        }\n        \n        if (isAccurate){\n            // 使用精确的方式\n            for(let i = 0; i < timeSchedule.length; i++){\n                if (timeSchedule[i] === time){\n                    let retData = new Map();\n                    curveObj.forEach((v:any, k:any) =>{\n                        retData.set(k, v[i]);\n                    })\n                    return retData;\n                }\n            }\n        } else {\n            // 使用不精确的方式\n            for(let i = 0; i < timeSchedule.length; i++){\n                if (timeSchedule[i] > time){\n                    let retData = new Map();\n                    curveObj.forEach((v:any, k:any) =>{\n                        retData.set(k, v[i-1]);\n                    })\n                    return retData;\n                }\n            }\n        }\n\n        return null;\n    }\n}\n"]}