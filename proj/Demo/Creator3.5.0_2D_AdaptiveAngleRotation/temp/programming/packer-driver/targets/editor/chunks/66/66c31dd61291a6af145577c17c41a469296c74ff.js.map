{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Demo/Creator3.5.0_2D_AdaptiveAngleRotation/assets/AdaptiveAngleRotation2D.ts"],"names":["_decorator","Component","Node","tween","Label","Tween","ccclass","property","AdaptiveAngleRotation2D","onPositive","stopAllByTarget","testNode","by","angle","delay","call","fitAngle","showLabel","string","start","onReverse","onFit","r","Math","round","random","console","log","currentAngle","diffAngle"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, tween, Label, Tween } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('AdaptiveAngleRotation2D')\nexport class AdaptiveAngleRotation2D extends Component {\n\n    @property(Node)\n    testNode !: Node;\n    @property(Label)\n    showLabel !: Label;\n\n    // 顺时针旋转90\n    onPositive() {\n        Tween.stopAllByTarget(this.testNode);\n        tween(this.testNode)\n            .by(0.2, { angle: -90 })\n            .delay(0.2)\n            .call(()=>{\n                this.fitAngle();\n                this.showLabel.string = \"angle : \" + this.testNode.angle;\n            })\n            .start();\n    }\n    \n    // 逆时针旋转90\n    onReverse() {\n        Tween.stopAllByTarget(this.testNode);\n        tween(this.testNode)\n            .by(0.2, { angle: 90 })\n            .delay(0.2)\n            .call(()=>{\n                this.fitAngle();\n                this.showLabel.string = \"angle : \" + this.testNode.angle;\n            })\n            .start();\n    }\n\n    // 角度数值处理\n    fitAngle () {\n        if (this.testNode.angle >= 360) {\n            this.testNode.angle -= 360;\n        }\n        if (this.testNode.angle <= -360) {\n            this.testNode.angle += 360;\n        }\n    }\n\n    // 自适应旋转\n    onFit() {\n        let r = Math.round(Math.random() * 360 - 180);\n        console.log(\"随机获取旋转后的角度Angle(-180~180):\", r);\n\n        let currentAngle = this.testNode.angle;\n        console.log(\"旋转前的节点的角度Angle:\", currentAngle);\n\n        let diffAngle = r - currentAngle;\n        console.log(\"需要旋转的角度Angle:\", diffAngle);\n\n        if (diffAngle >= 360) {\n            diffAngle -= 360;\n        }\n        if (diffAngle <= -360) {\n            diffAngle += 360;\n        }\n\n        tween(this.testNode)\n            .by(0.2, { angle: diffAngle })\n            .delay(0.2)\n            .call(()=>{\n                console.log(\"旋转后的节点的角度Angle:\", this.testNode.angle);\n                this.showLabel.string = \"angle : \" + this.testNode.angle;\n            })\n            .start();\n    }\n}\n\n"]}