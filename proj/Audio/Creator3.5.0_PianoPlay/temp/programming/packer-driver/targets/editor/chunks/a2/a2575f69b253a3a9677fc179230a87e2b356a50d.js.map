{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Audio/Creator3.5.0_PianoPlay/assets/script/AudioController.ts"],"names":["_decorator","Component","AudioClip","AudioSource","Label","ccclass","property","AudioController","type","start","onButtonClicked","event","index","clip","clips","nameLabel","string","name","audioSource","playOneShot","onVolumeSliderChanged","eventTarget","volume","progress"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,K,OAAAA,K;;;;;;;OAClD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;iCAGjBO,e,WADZF,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAE,CAACN,SAAD;AAAP,OAAD,C,UAGRI,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEL;AAAP,OAAD,C,UAGRG,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEJ;AAAP,OAAD,C,2BATb,MACaG,eADb,SACqCN,SADrC,CAC+C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAW3CQ,QAAAA,KAAK,GAAI,CACL;AACH,SAb0C,CAe3C;AACA;AACA;;;AAEAC,QAAAA,eAAe,CAACC,KAAD,EAAaC,KAAb,EAA4B;AACvC,cAAIC,IAAe,GAAG,KAAKC,KAAL,CAAWF,KAAX,CAAtB;AACA,eAAKG,SAAL,CAAeC,MAAf,GAAwBH,IAAI,CAACI,IAA7B;AACA,eAAKC,WAAL,CAAiBC,WAAjB,CAA6BN,IAA7B;AACH;;AAEDO,QAAAA,qBAAqB,CAACC,WAAD,EAAsB;AACvC,eAAKH,WAAL,CAAiBI,MAAjB,GAA0BD,WAAW,CAACE,QAAtC;AACH;;AA3B0C,O;;;;;iBAGf,E;;;;;;;iBAGM,I;;;;;;;iBAGR,I","sourcesContent":["import { _decorator, Component, AudioClip, AudioSource, Label, Slider } from \"cc\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"AudioController\")\nexport class AudioController extends Component {\n\n    @property({type: [AudioClip]})\n    public clips: AudioClip[] = [];\n\n    @property({type: AudioSource})\n    public audioSource: AudioSource = null!;\n\n    @property({type: Label})\n    public nameLabel: Label = null!;\n\n    start () {\n        // Your initialization goes here.\n    }\n\n    // update (deltaTime: number) {\n    //     // Your update function goes here.\n    // }\n\n    onButtonClicked(event: any, index: number) {\n        let clip: AudioClip = this.clips[index];\n        this.nameLabel.string = clip.name;\n        this.audioSource.playOneShot(clip);\n    }\n\n    onVolumeSliderChanged(eventTarget: Slider) {\n        this.audioSource.volume = eventTarget.progress;\n    }\n}\n"]}