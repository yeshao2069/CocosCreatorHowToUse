{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Audio/Creator3.5.0_AddGlobalButtonSound/assets/script/AddGlobalButtonSound.ts"],"names":["_decorator","Component","AudioClip","Button","EventHandler","ccclass","property","AddGlobalButtonSound","onLoad","prototype","_onTouchEnded","event","audio","play","self","target","getComponent","interactable","enabledInHierarchy","_pressed","emitEvents","clickEvents","node","emit","_updateState","propagationStopped"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAoBC,MAAAA,Y,OAAAA,Y;;;;;;;OAC/D;AAACC,QAAAA,OAAD;AAAUC,QAAAA;AAAV,O,GAAsBN,U;;yBAGPO,oB,WADpBF,OAAO,CAAC,sBAAD,C,UAEHC,QAAQ,CAACJ,SAAD,C,2BAFb,MACqBK,oBADrB,SACkDN,SADlD,CAC4D;AAAA;AAAA;;AAAA;AAAA;;AAIxDO,QAAAA,MAAM,GAAI;AAEN;AACAL,UAAAA,MAAM,CAACM,SAAP,CAAiBC,aAAjB,GAAkCC,KAAD,IAAuB;AACpD,iBAAKC,KAAL,CAAYC,IAAZ;AAEA,gBAAIC,IAAI,GAAIH,KAAK,CAACI,MAAP,CAAwBC,YAAxB,CAAqCb,MAArC,CAAX;AACA,gBAAI,CAACW,IAAI,CAACG,YAAN,IAAsB,CAACH,IAAI,CAACI,kBAAhC,EAAoD;;AAEpD,gBAAKJ,IAAD,CAAcK,QAAlB,EAA4B;AACxBf,cAAAA,YAAY,CAACgB,UAAb,CAAwBN,IAAI,CAACO,WAA7B,EAA0CV,KAA1C;AACA,mBAAKW,IAAL,CAAUC,IAAV,CAAe,OAAf,EAAwB,IAAxB;AACH;;AACAT,YAAAA,IAAD,CAAcK,QAAd,GAAyB,KAAzB;;AACCL,YAAAA,IAAD,CAAcU,YAAd;;AACA,gBAAIb,KAAJ,EAAW;AACPA,cAAAA,KAAK,CAACc,kBAAN,GAA2B,IAA3B;AACH;AACJ,WAfD;AAgBH;;AAvBuD,O;;;;;iBAE9B,I","sourcesContent":["import { _decorator, Component, Node, AudioClip, Button, EventTouch, EventHandler } from 'cc';\nconst {ccclass, property} = _decorator;\n\n@ccclass('AddGlobalButtonSound')\nexport default class AddGlobalButtonSound extends Component {\n    @property(AudioClip)\n    audio: AudioClip | null = null;\n\n    onLoad () {\n\n        // @ts-ignore\n        Button.prototype._onTouchEnded = (event: EventTouch) => {\n            this.audio!.play();\n\n            let self = (event.target as Node)!.getComponent(Button)!;\n            if (!self.interactable || !self.enabledInHierarchy) return;\n\n            if ((self as any)._pressed) {\n                EventHandler.emitEvents(self.clickEvents, event);\n                this.node.emit('click', this);\n            }\n            (self as any)._pressed = false;\n            (self as any)._updateState();\n            if (event) {\n                event.propagationStopped = true;\n            }\n        }\n    }\n}\n"]}