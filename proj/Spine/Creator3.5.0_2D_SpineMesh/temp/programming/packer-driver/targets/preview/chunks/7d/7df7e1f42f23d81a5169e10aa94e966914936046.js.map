{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Spine/Creator3.5.0_2D_SpineMesh/assets/script/SpineMeshEffect.ts"],"names":["_decorator","Component","sp","Size","ccclass","property","type","Skeleton","_swirlTime","_maxEffect","_index","_bound","_swirlEffect","_jitterEffect","start","skeletonNodeUIProps","skeleton","node","_uiProps","uiTransformComp","width","height","VertexEffectDelegate","initSwirlWithPowOut","initJitter","switchEffect","setVertexEffectDelegate","update","dt","percent","bound","swirlEffect","getSwirlVertexEffect","angle","centerX","centerY","radius","Math","sqrt"],"mappings":";;;;;;;;;;;;;;AAESA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,I,OAAAA,I;;;;;;;OAC9B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;0CAG7BI,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAEJ,EAAE,CAACK;AAAV,OAAD,C,4BAHb,sBAC6BN,SAD7B,CACuC;AAAA;AAAA;;AAAA;;AAAA,eAK3BO,UAL2B,GAKd,CALc;AAAA,eAM3BC,UAN2B,GAMd,CANc;AAAA,eAO3BC,MAP2B,GAOlB,CAPkB;AAAA,eAQ3BC,MAR2B;AAAA,eAS3BC,YAT2B;AAAA,eAU3BC,aAV2B;AAAA;;AAanCC,QAAAA,KAAK,GAAI;AACL,eAAKN,UAAL,GAAkB,CAAlB;AACA,eAAKC,UAAL,GAAkB,CAAlB;AACA,eAAKC,MAAL,GAAc,CAAd;AACA,cAAMK,mBAAmB,GAAG,KAAKC,QAAL,CAAeC,IAAf,CAAoBC,QAApB,CAA6BC,eAAzD;AACA,eAAKR,MAAL,GAAc,IAAIR,IAAJ,CAASY,mBAAmB,CAACK,KAA7B,EAAoCL,mBAAmB,CAACM,MAAxD,CAAd;AAEA,eAAKT,YAAL,GAAoB,IAAIV,EAAE,CAACoB,oBAAP,EAApB;;AACA,eAAKV,YAAL,CAAkBW,mBAAlB,CAAsC,CAAtC,EAAyC,CAAzC;;AAEA,eAAKV,aAAL,GAAqB,IAAIX,EAAE,CAACoB,oBAAP,EAArB;;AACA,eAAKT,aAAL,CAAmBW,UAAnB,CAA8B,EAA9B,EAAkC,EAAlC;AACH;;AAEDC,QAAAA,YAAY,GAAI;AACZ,eAAKf,MAAL;;AACA,cAAI,KAAKA,MAAL,IAAe,KAAKD,UAAxB,EAAoC;AAChC,iBAAKC,MAAL,GAAc,CAAd;AACH;;AAED,kBAAQ,KAAKA,MAAb;AACI,iBAAK,CAAL;AACI,mBAAKM,QAAL,CAAcU,uBAAd,CAAsC,IAAtC;AACA;;AACJ,iBAAK,CAAL;AACI,mBAAKV,QAAL,CAAcU,uBAAd,CAAsC,KAAKb,aAA3C;AACA;;AACJ,iBAAK,CAAL;AACI,mBAAKG,QAAL,CAAcU,uBAAd,CAAsC,KAAKd,YAA3C;AACA;AATR;AAWH;;AACDe,QAAAA,MAAM,CAAEC,EAAF,EAAa;AACf,cAAI,KAAKlB,MAAL,IAAe,CAAnB,EAAsB;AAClB,iBAAKF,UAAL,IAAmBoB,EAAnB;AACA,gBAAIC,OAAO,GAAG,KAAKrB,UAAL,GAAkB,CAAhC;AACA,gBAAIqB,OAAO,GAAG,CAAd,EAAiBA,OAAO,GAAG,KAAKA,OAAO,GAAE,CAAd,CAAV;AAEjB,gBAAIC,KAAK,GAAG,KAAKnB,MAAjB;;AACA,gBAAIoB,WAAW,GAAG,KAAKnB,YAAL,CAAmBoB,oBAAnB,EAAlB;;AACAD,YAAAA,WAAW,CAACE,KAAZ,GAAoB,MAAMJ,OAA1B;AACAE,YAAAA,WAAW,CAACG,OAAZ,GAAsBJ,KAAK,CAACV,KAAN,GAAc,GAApC;AACAW,YAAAA,WAAW,CAACI,OAAZ,GAAsBL,KAAK,CAACT,MAAN,GAAe,GAArC;AAEAU,YAAAA,WAAW,CAACK,MAAZ,GAAqBP,OAAO,GAAGQ,IAAI,CAACC,IAAL,CAAUR,KAAK,CAACV,KAAN,GAAcU,KAAK,CAACV,KAApB,GAA4BU,KAAK,CAACT,MAAN,GAAeS,KAAK,CAACT,MAA3D,CAA/B;AACH;AACJ;;AA3DkC,O","sourcesContent":["\n\nimport { _decorator, Component, sp, Size } from 'cc';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('SpineMeshEffect')\nexport default class extends Component {\n\n    @property({type: sp.Skeleton})\n    skeleton !: sp.Skeleton;\n\n    private _swirlTime = 0;\n    private _maxEffect = 0;\n    private _index = 0;\n    private _bound?:Size;\n    private _swirlEffect?:sp.VertexEffectDelegate;\n    private _jitterEffect?:sp.VertexEffectDelegate;\n    \n\n    start () {\n        this._swirlTime = 0;\n        this._maxEffect = 3;\n        this._index = 0;\n        const skeletonNodeUIProps = this.skeleton!.node._uiProps.uiTransformComp!;\n        this._bound = new Size(skeletonNodeUIProps.width, skeletonNodeUIProps.height);\n\n        this._swirlEffect = new sp.VertexEffectDelegate();\n        this._swirlEffect.initSwirlWithPowOut(0, 2);\n\n        this._jitterEffect = new sp.VertexEffectDelegate();\n        this._jitterEffect.initJitter(20, 20);\n    }\n\n    switchEffect () {\n        this._index++;\n        if (this._index >= this._maxEffect) {\n            this._index = 0;\n        }\n\n        switch (this._index) {\n            case 0:\n                this.skeleton.setVertexEffectDelegate(null as any);\n                break;\n            case 1:\n                this.skeleton.setVertexEffectDelegate(this._jitterEffect!);\n                break;\n            case 2:\n                this.skeleton.setVertexEffectDelegate(this._swirlEffect!);\n                break;\n        }\n    }\n    update (dt:number) {\n        if (this._index == 2) {\n            this._swirlTime += dt;\n            let percent = this._swirlTime % 2;\n            if (percent > 1) percent = 1 - (percent -1 );\n\n            let bound = this._bound!;\n            let swirlEffect = this._swirlEffect!.getSwirlVertexEffect();\n            swirlEffect.angle = 360 * percent;\n            swirlEffect.centerX = bound.width * 0.5;\n            swirlEffect.centerY = bound.height * 0.5;\n\n            swirlEffect.radius = percent * Math.sqrt(bound.width * bound.width + bound.height * bound.height);\n        }    \n    } \n}\n\n"]}