{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Graphics/Creator3.5.0_2D_Doodle/assets/Doodle.ts"],"names":["_decorator","Component","Node","CCFloat","CCBoolean","Graphics","Color","Vec2","find","view","ccclass","property","Doodle","nodes","ripples","mouse","color","cycle","input","onEnable","_graphics","getComponent","x","y","r","g","b","a","createBezierNodes","canvas","that","on","EventType","TOUCH_START","touch","event","touchPos","getUILocation","winSize","getFrameSize","subtract2f","width","height","addRipple","TOUCH_END","updateColorCycle","quantity","len","theta","Math","PI","cos","sin","push","vx","vy","lastX","lastY","min","max","disturb","orbit","angle","random","speed","length","reactivity","fade","update","dt","ease","friction","index","ripple","splice","forEach","call","node","render","graphics","currentIndex","nextIndex","xc","yc","debug","clear","strokeColor","fromHEX","fillColor","lineWidth","moveTo","N","quadraticCurveTo","fill","stroke","lineCap","LineCap","ROUND","lineJoin","LineJoin","lineTo","circle"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, CCFloat, CCBoolean, Graphics, Color, Vec2, find, view, EventTouch } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Doodle')\nexport class Doodle extends Component {\n    \n    @property(CCFloat)\n    reactivity: number = 0.5;\n    @property(CCBoolean)\n    debug: boolean = false;\n\n    _graphics !: Graphics;\n    nodes: any[] = [];\n    ripples: any[] = [];\n    mouse: Vec2 = new Vec2();\n    color : Color = new Color();\n    cycle: number = 0;\n    input: boolean = false;\n\n    onEnable () {\n        this._graphics = this.getComponent(Graphics)!;\n\n        this.nodes = [];\n        this.ripples = [];\n        this.mouse.x = 0, this.mouse.y = 0;\n        this.color.r = 0, this.color.g = 0, this.color.b = 0, this.color.a = 255;\n        this.cycle = 90;\n\n        this.createBezierNodes();\n\n        let canvas = find('Canvas')!;\n        const that = this;\n        canvas.on(Node.EventType.TOUCH_START, function (touch: EventTouch, event: any) {\n            let touchPos = touch.getUILocation();\n            let winSize = view.getFrameSize();\n            touchPos.subtract2f(winSize.width / 2, winSize.height /2);\n            that.mouse = touchPos;\n            that.addRipple();\n        }, this);\n        canvas.on(Node.EventType.TOUCH_END, function () {\n            that.input = false;\n        }, this);\n    }\n\n    createBezierNodes () {\n        this.updateColorCycle();\n\n        for(var quantity = 0, len = 6; quantity < len; quantity++) {  \n            var theta = Math.PI * 2 * quantity / len;\n\n            var x = 0 * Math.cos(theta);\n            var y = 0 * Math.sin(theta);\n            \n            this.nodes.push({\n                x: x,\n                y: y,\n                vx: 0,\n                vy: 0,\n                lastX: x,\n                lastY: y,\n                min: 150,\n                max: 250,\n                disturb: 150,\n                orbit: 20,\n                angle: Math.random() * Math.PI * 2,\n                speed: 0.05 + Math.random() * 0.05,                              \n                theta: theta\n            });    \n        }\n    }\n\n    addRipple () {\n        this.input = true;\n        if (this.ripples.length === 0) {\n            this.updateColorCycle();\n\n            this.ripples.push({\n                x: this.mouse.x,\n                y: this.mouse.y,\n                reactivity: 0,\n                fade: 1.0\n            });\n        }\n    }\n\n    updateColorCycle () {\n        this.cycle = Math.min(this.cycle + this.reactivity + 0.3, 100) !== 100 ? this.cycle += this.reactivity + 0.3 : 0;\n        \n        let color = this.color;\n        color.r = ~~(Math.sin(0.3 * this.cycle + 0) * 127 + 128);\n        color.g = ~~(Math.sin(0.3 * this.cycle + 2) * 127 + 128);\n        color.b = ~~( Math.sin(0.3 * this.cycle + 4) * 127 + 128);\n    }\n\n    update (dt: number) {\n        let nodes = this.nodes;\n        let ripples = this.ripples;\n        var ease = 0.01, friction = 0.98;\n        \n        for (var index = 0; index < ripples.length; index++) {\n            var ripple = ripples[index];\n            ripple.reactivity += 5;\n            ripple.fade -= 0.05;\n            if (ripple.fade <= 0.0) {\n                ripples.splice(index, 1);\n            }   \n        }\n    \n        [].forEach.call(nodes, (node: any, index: number) => {\n\n            node.lastX += (node.disturb * Math.cos(node.theta) - node.lastX) * 0.08;\n            node.lastY += (node.disturb * Math.sin(node.theta) - node.lastY) * 0.08;\n            \n            // Motion\n            node.x += ((node.lastX + Math.cos(node.angle) * node.orbit) - node.x) * 0.08;\n            node.y += ((node.lastY + Math.sin(node.angle) * node.orbit) - node.y) * 0.08;\n\n            // Ease\n            node.vx += (node.min - node.disturb) * ease;\n        \n            // Friction\n            node.vx *= friction;\n            \n            node.disturb += node.vx;\n            \n            if (this.input) {\n                node.disturb += (node.max - node.disturb) * this.reactivity;\n            }\n                                                     \n            node.angle += node.speed;\n        });\n\n        this.render();\n    }\n\n    render () {\n        let nodes = this.nodes;\n        let ripples = this.ripples;\n        let graphics = this._graphics;\n        let color = this.color;\n    \n        var currentIndex, nextIndex, xc, yc;\n        color.a = this.debug ? 255 : 255/2;\n\n        graphics.clear();\n                        \n        [].forEach.call(nodes, (node, index) => {\n    \n            currentIndex = nodes[nodes.length - 1];\n            nextIndex = nodes[0];\n                \n            xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.5;\n            yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.5;\n        \n            let strokeColor = new Color();\n            Color.fromHEX(strokeColor, this.debug ? '#a9a9a9' : '#e5e5e5');\n            strokeColor.a = this.debug ? 255 : 255/2;\n            graphics.strokeColor = strokeColor;\n\n            graphics.fillColor = color;\n            graphics.lineWidth = this.debug ? 1 : 5;\n\n            graphics.moveTo(xc, yc);\n            \n            // Draw through N points\n            for(var N = 0; N < nodes.length; N++) {\n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.5;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.5;\n            \n                graphics.quadraticCurveTo(currentIndex.x, currentIndex.y, xc, yc);\n                \n            }\n\n            this.debug ? null : graphics.fill();\n            graphics.stroke();\n                        \n            graphics.lineWidth = 1;\n            graphics.lineCap = Graphics.LineCap.ROUND;\n            graphics.lineJoin = Graphics.LineJoin.ROUND;\n            graphics.strokeColor.fromHEX('#a9a9a9');\n            graphics.fillColor.fromHEX('#a9a9a9');\n            \n            // Draw through N points\n            for(var N = 0; N < nodes.length; N++) {\n                \n                // First anchor\n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.8;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.8;\n                \n                graphics.moveTo(xc, yc);\n                \n                // Second anchor\n                currentIndex = nextIndex;\n                nextIndex = N + 2 > nodes.length - 1 ? nodes[N - nodes.length + 2] : nodes[N + 2]; \n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.2;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.2;\n                \n                graphics.lineTo(xc, yc);\n                graphics.stroke();\n                \n                // First anchor\n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.8;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.8;\n                \n                graphics.circle(xc, yc, 2);\n                graphics.fill();\n            \n                // Second anchor\n                currentIndex = nextIndex;\n                nextIndex = N + 2 > nodes.length - 1 ? nodes[N - nodes.length + 2] : nodes[N + 2]; \n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.2;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.2;\n                \n                graphics.circle(xc, yc, 2);\n                graphics.fill();\n                \n            }\n\n        });\n        \n        for(var index = 0; index < ripples.length; index++) {\n        \n            var ripple = ripples[index];\n            \n            let fillColor = new Color();\n            Color.fromHEX(fillColor, '#ffffff');\n            fillColor.a = ripple.fade * 255;\n            graphics.fillColor = fillColor;\n            \n            graphics.circle(ripple.x, ripple.y, ripple.reactivity);\n            graphics.fill();\n        }\n                    \n    }\n}\n"]}