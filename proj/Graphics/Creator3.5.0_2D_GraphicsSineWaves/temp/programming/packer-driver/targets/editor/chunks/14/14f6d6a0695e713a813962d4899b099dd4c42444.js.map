{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Graphics/Creator3.5.0_2D_GraphicsSineWaves/assets/script/SineWaves.ts"],"names":["_decorator","Component","CCFloat","Graphics","view","CWaves","CEase","Wave","ccclass","property","SineWaves","time","yAxis","width","waveWidth","waveLeft","onLoad","ctx","getComponent","lineCap","LineCap","BUTT","lineJoin","LineJoin","ROUND","waves","i","length","waveFn","getInstance","waveType","callback","easeFn","easeType","update","dt","clear","visibleRect","getFrameSize","l","timeModifier","drawWave","options","lineWidth","strokeColor","moveTo","lineTo","segmentLength","point","getPoint","x","y","stroke","position","speed","wavelength","amplitude"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, CCFloat, Graphics, view, Enum } from 'cc';\nimport { CWaves, CEase, Wave } from './Wave';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SineWaves')\nexport class SineWaves extends Component {\n   \n    @property(CCFloat)\n    speed : number = 1;\n    @property([Wave])\n    waves : Wave[] = [];\n\n    ctx !: Graphics;\n    time : number = 0;\n    yAxis : number = 0;\n    width : number = 0;\n    waveWidth : number = 0;\n    waveLeft : number = 0;\n\n    // use this for initialization\n    onLoad () {\n        this.time = 0;\n\n        this.ctx = this.getComponent(Graphics)!;\n        this.ctx.lineCap = Graphics.LineCap.BUTT;\n        this.ctx.lineJoin = Graphics.LineJoin.ROUND;\n\n        let waves = this.waves;\n        for (let i = 0; i < waves.length; i++) {\n            // @ts-ignore\n            waves[i].waveFn = CWaves.getInstance()[waves[i].waveType].callback;\n\n            // @ts-ignore\n            waves[i].easeFn = CEase.getInstance()[waves[i].easeType].callback;\n        }\n    }\n\n    update (dt: number) {\n        this.ctx.clear();\n\n        let visibleRect = view.getFrameSize();\n        this.yAxis = 0;\n        this.width = visibleRect.width;\n\n        this.waveWidth = this.width * 0.95;\n        this.waveLeft = this.width * 0.25;\n\n        this.time += dt;\n\n        // Draw each line\n        let waves = this.waves;\n        for (let i = 0, l = waves.length; i < l; i++) {\n            var timeModifier = this.waves[i].timeModifier || 1;\n            this.drawWave(this.time * timeModifier, waves[i]);\n        }\n    }\n\n    /**\n     * Draws one line on the canvas\n     *\n     * @param  {Number} time    current internal clock time\n     * @param  {Object} options wave options\n     */\n     drawWave (time: number, options: any) {\n        // Styles\n        this.ctx.lineWidth = options.lineWidth;\n        this.ctx.strokeColor = options.strokeColor;\n\n        // Starting Line\n        this.ctx.moveTo(0, this.yAxis);\n        this.ctx.lineTo(this.waveLeft, this.yAxis);\n\n        for (let i = 0; i < this.waveWidth; i += options.segmentLength) {\n            // Calculate where the next point is\n            let point = this.getPoint(time, i, options);\n\n            // Draw to it\n            this.ctx.lineTo(point.x, point.y);\n        }\n\n        // Ending Line\n        this.ctx.lineTo(this.width, this.yAxis);\n\n        // Stroke it\n        this.ctx.stroke();\n    }\n\n    /**\n     * Calculate the x, y coordinates of a point in a sine wave\n     *\n     * @param  {Number} time     Internal time index\n     * @param  {Number} position Pixels x poistion\n     * @param  {Object} options  Wave options\n     *\n     * @return {Object}          {x, y}\n     */\n     getPoint (time: number, position: number, options: any) {\n        var x = (time * this.speed) + (-this.yAxis + position) / options.wavelength;\n        var y = options.waveFn(x);\n\n        // Left and Right Sine Easing\n        var amplitude = options.easeFn(position / this.waveWidth, options.amplitude);\n\n        x = position + this.waveLeft;\n        y = amplitude * y + this.yAxis;\n\n        return {\n            x: x,\n            y: y\n        };\n    }\n}\n"]}