{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Performance/Creator3.5.0_3D_StaticBatch/assets/script/orbit-camera.ts"],"names":["Component","_decorator","systemEvent","SystemEvent","Vec3","Quat","Vec2","Node","lerp","director","Canvas","EDITOR","ccclass","property","type","tempVec3","tempVec3_2","tempQuat","DeltaFactor","PositiveForward","OrbitCamera","_startRotation","_center","_targetCenter","_touched","_targetRotation","_rotation","_radius","radius","_targetRadius","v","target","_target","set","worldPosition","targetRotation","start","canvas","getScene","getComponentInChildren","node","enableTouch","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","enableScaleRadius","MOUSE_WHEEL","onMouseWhee","resetTargetRotation","fromEuler","x","y","z","limitRotation","followTargetRotationY","toEuler","worldRotation","touch","event","delta","getDelta","rotateX","rotateAround","UP","scrollY","getScrollY","radiusScaleSpeed","Math","sign","min","maxRadius","max","minRadius","rotation","xRotationRange","update","dt","autoRotate","autoRotateSpeed","slerp","rotateSpeed","followSpeed","transformQuat","FORWARD","multiplyScalar","add","position","lookAt"],"mappings":"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","sourcesContent":["import { Component, _decorator, systemEvent, SystemEvent, Vec3, EventTouch, Touch,\n    Quat, Vec2, Node, EventMouse, lerp, director, Canvas } from 'cc'\nimport { EDITOR } from 'cc/env';\nconst { ccclass, property, type } = _decorator;\n\nlet tempVec3 = new Vec3();\nlet tempVec3_2 = new Vec3();\nlet tempQuat = new Quat();\nconst DeltaFactor = 1 / 200;\nlet PositiveForward = new Vec3(0, 0, 1);\n\n@ccclass('OrbitCamera')\nexport default class OrbitCamera extends Component {\n    @property\n    enableTouch = true;\n    @property\n    enableScaleRadius = false;\n\n    @property\n    autoRotate = false;\n    @property\n    autoRotateSpeed = 90;\n\n    @property\n    rotateSpeed = 1;\n    @property\n    followSpeed = 1;\n    @property\n    xRotationRange = new Vec2(5, 70);\n    @type(Node)\n    _target: Node | null = null;\n\n    @property\n    get radius () {\n        return this._targetRadius;\n    }\n    set radius (v) {\n        this._targetRadius = v;\n    }\n    @property\n    radiusScaleSpeed = 1;\n    @property\n    minRadius = 5;\n    @property\n    maxRadius = 10;\n\n    @type(Node)\n    get target () {\n        return this._target;\n    }\n    set target (v) {\n        this._target = v;\n        this._targetRotation.set(this._startRotation);\n        this._targetCenter.set(v!.worldPosition);\n    }\n\n    @type(Vec3)\n    get targetRotation (): Vec3 {\n        if (!EDITOR) {\n            this._startRotation.set(this._targetRotation);\n        }\n        return this._startRotation;\n    }\n    set targetRotation (v: Vec3) {\n        this._targetRotation.set(v);\n        this._startRotation.set(v);\n    }\n\n    @property\n    followTargetRotationY = true;\n\n    private _startRotation = new Vec3();\n    private _center = new Vec3();\n    private _targetCenter = new Vec3();\n    private _touched = false;\n    private _targetRotation = new Vec3();\n    private _rotation = new Quat();\n\n    @property\n    private _targetRadius = 10;\n    private _radius = 10;\n\n    start () {\n        let canvas = director.getScene()!.getComponentInChildren(Canvas);\n        if (canvas && canvas.node) {\n            if (this.enableTouch) {\n                canvas.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this)\n                canvas.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this)\n                canvas.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this)\n            }\n\n            if (this.enableScaleRadius) {\n                canvas.node.on(Node.EventType.MOUSE_WHEEL, this.onMouseWhee, this)\n            }\n        }\n        else {\n            if (this.enableTouch) {\n                systemEvent.on(SystemEvent.EventType.TOUCH_START, this.onTouchStart, this)\n                systemEvent.on(SystemEvent.EventType.TOUCH_MOVE, this.onTouchMove, this)\n                systemEvent.on(SystemEvent.EventType.TOUCH_END, this.onTouchEnd, this)\n            }\n\n            if (this.enableScaleRadius) {\n                systemEvent.on(SystemEvent.EventType.MOUSE_WHEEL, this.onMouseWhee, this)\n            }\n        }\n\n\n        this.resetTargetRotation();\n        Quat.fromEuler(this._rotation, this._targetRotation.x, this._targetRotation.y, this._targetRotation.z);\n\n        if (this.target) {\n            this._targetCenter.set(this.target.worldPosition);\n            this._center.set(this._targetCenter);\n        }\n\n        this._radius = this.radius;\n\n        this.limitRotation()\n    }\n\n    resetTargetRotation () {\n        let targetRotation = this._targetRotation.set(this._startRotation);\n        if (this.followTargetRotationY) {\n            targetRotation = tempVec3_2.set(targetRotation);\n            Quat.toEuler(tempVec3, this.target!.worldRotation);\n            targetRotation.y += tempVec3.y;\n        }\n    }\n\n    onTouchStart () {\n        this._touched = true;\n    }\n    onTouchMove (touch?: Touch, event?: EventTouch) {\n        if (!this._touched) return;\n        let delta = touch!.getDelta()\n\n        Quat.fromEuler(tempQuat, this._targetRotation.x, this._targetRotation.y, this._targetRotation.z);\n\n        Quat.rotateX(tempQuat, tempQuat, -delta.y * DeltaFactor);\n        Quat.rotateAround(tempQuat, tempQuat, Vec3.UP, -delta.x * DeltaFactor);\n\n        Quat.toEuler(this._targetRotation, tempQuat);\n\n        this.limitRotation()\n    }\n    onTouchEnd () {\n        this._touched = false;\n    }\n\n    onMouseWhee (event: EventMouse) {\n        let scrollY = event.getScrollY();\n        this._targetRadius += this.radiusScaleSpeed * -Math.sign(scrollY);\n        this._targetRadius = Math.min(this.maxRadius, Math.max(this.minRadius, this._targetRadius));\n    }\n\n    limitRotation () {\n        let rotation = this._targetRotation;\n\n        if (rotation.x < this.xRotationRange.x) {\n            rotation.x = this.xRotationRange.x\n        }\n        else if (rotation.x > this.xRotationRange.y) {\n            rotation.x = this.xRotationRange.y\n        }\n\n        rotation.z = 0;\n    }\n\n    update (dt: number) {\n        let targetRotation = this._targetRotation;\n        if (this.autoRotate && !this._touched) {\n            targetRotation.y += this.autoRotateSpeed * dt;\n        }\n\n        if (this.target) {\n            this._targetCenter.set(this.target.worldPosition);\n\n            if (this.followTargetRotationY) {\n                targetRotation = tempVec3_2.set(targetRotation);\n                Quat.toEuler(tempVec3, this.target.worldRotation);\n                targetRotation.y += tempVec3.y;\n            }\n        }\n\n        Quat.fromEuler(tempQuat, targetRotation.x, targetRotation.y, targetRotation.z);\n\n        Quat.slerp(this._rotation, this._rotation, tempQuat, dt * 7 * this.rotateSpeed);\n        Vec3.lerp(this._center, this._center, this._targetCenter, dt * 5 * this.followSpeed);\n\n        this._radius = lerp(this._radius, this._targetRadius, dt * 5);\n\n        Vec3.transformQuat(tempVec3, Vec3.FORWARD, this._rotation);\n        Vec3.multiplyScalar(tempVec3, tempVec3, this._radius)\n        tempVec3.add(this._center)\n\n        this.node.position = tempVec3;\n        this.node.lookAt(this._center);\n    }\n}\n"]}