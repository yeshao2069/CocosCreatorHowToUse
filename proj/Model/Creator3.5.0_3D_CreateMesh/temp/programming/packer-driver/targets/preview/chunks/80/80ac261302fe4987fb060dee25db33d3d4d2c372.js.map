{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Model/Creator3.5.0_3D_CreateMesh/assets/EditableGeometry/EditableCone.ts"],"names":["_decorator","Component","utils","primitives","ModelComponent","CCFloat","CCInteger","ccclass","property","executeInEditMode","EditableCone","type","step","range","slide","model","radius","_radius","v","rebuildModel","height","_height","radialSegments","_radialSegments","heightSegments","_heightSegments","fillRange","_fillRange","capped","_capped","onLoad","getComponent","addComponent","box","cone","Math","round","arc","PI","mesh","createMesh","destroy","onDestroy"],"mappings":"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","sourcesContent":["/*\r\n * @Author: wss \r\n * @Date: 2020-04-04 20:00:36 \r\n * @Last Modified by:   wss \r\n * @Last Modified time: 2020-04-04 20:00:36 \r\n */\r\nimport { _decorator, Component, Node, utils, primitives, geometry, ModelComponent, CCFloat, CCInteger } from \"cc\";\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n@ccclass(\"EditableCone\")\r\n@executeInEditMode\r\nexport class EditableCone extends Component {\r\n\r\n    @property\r\n    private _radius : number = 0.5;\r\n    public get radius() : number {\r\n        return this._radius;\r\n    }\r\n    @property\r\n    public set radius(v : number) {\r\n        this._radius = v;\r\n        this.rebuildModel();\r\n    }\r\n\r\n    @property\r\n    private _height : number = 1;\r\n    public get height() : number {\r\n        return this._height;\r\n    }\r\n    @property\r\n    public set height(v : number) {\r\n        this._height = v;\r\n        this.rebuildModel();\r\n    }\r\n\r\n    @property\r\n    private _radialSegments : number = 24;\r\n    public get radialSegments() : number {\r\n        return this._radialSegments;\r\n    }\r\n    @property({\r\n        type:CCInteger,\r\n        step:1,\r\n    })\r\n    public set radialSegments(v : number) {\r\n        this._radialSegments = v;\r\n        this.rebuildModel();\r\n    }\r\n\r\n    @property\r\n    private _heightSegments : number = 4;\r\n    public get heightSegments() : number {\r\n        return this._heightSegments;\r\n    }\r\n    @property({\r\n        type:CCInteger,\r\n        step:1,\r\n    })\r\n    public set heightSegments(v : number) {\r\n        this._heightSegments = v;\r\n        this.rebuildModel();\r\n    }\r\n\r\n\r\n    @property({\r\n        type:CCFloat,\r\n    })\r\n    private _fillRange : number = 1.0;\r\n    public get fillRange() : number {\r\n        return this._fillRange;\r\n    }\r\n    @property({\r\n        type:CCFloat,\r\n        range:[0,1.0],\r\n        slide:true,\r\n        step:0.1,\r\n    })\r\n    public set fillRange(v : number) {\r\n        this._fillRange = v;\r\n        this.rebuildModel();\r\n    }\r\n\r\n    @property\r\n    private _capped : boolean = true;\r\n    public get capped() : boolean {\r\n        return this._capped;\r\n    }\r\n    @property\r\n    public set capped(v : boolean) {\r\n        this._capped = v;\r\n        this.rebuildModel();\r\n    }\r\n    \r\n\r\n    private model:ModelComponent;\r\n\r\n    onLoad() {\r\n        this.model = this.getComponent(ModelComponent);\r\n        if (this.model == null) this.model = this.addComponent(ModelComponent);\r\n        this.rebuildModel();\r\n    }\r\n\r\n    private rebuildModel()\r\n    {\r\n        let box: primitives.IGeometry = primitives.cone(this._radius, this._height, {\r\n            radialSegments: Math.round(this.radialSegments),\r\n            heightSegments: Math.round(this.heightSegments),\r\n            capped: this._capped,\r\n            arc: this._fillRange * 2 * Math.PI,\r\n        });\r\n\r\n        let mesh = utils.createMesh(box);\r\n        if (this.model.mesh) this.model.mesh.destroy();\r\n        this.model.mesh = mesh;\r\n    }\r\n\r\n    onDestroy() {\r\n        if (this.model.mesh) {\r\n            this.model.mesh.destroy();\r\n            this.model.mesh = null;\r\n        }\r\n    }\r\n\r\n}\r\n"]}