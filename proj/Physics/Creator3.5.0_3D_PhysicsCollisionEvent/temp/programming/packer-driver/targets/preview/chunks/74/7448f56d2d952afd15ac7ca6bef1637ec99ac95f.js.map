{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Physics/Creator3.5.0_3D_PhysicsCollisionEvent/assets/script/CollisionTest.ts"],"names":["_decorator","Component","Collider","Label","Color","UITransform","Size","VerticalTextAlignment","ccclass","property","CollisionTest","type","constructor","id","alreadyStay","messageAmount","_idCounter","start","collider","getComponent","on","onCollision","event","selfCollider","label","string","fontSize","lineHeight","verticalAlign","CENTER","contentSize","color","RED","enabled","node","name","otherCollider"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AACjBC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,K,OAAAA,K;AAAwBC,MAAAA,K,OAAAA,K;AAClCC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,qB,OAAAA,qB;;;;;;;OACjB;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;;+BAGjBU,a,WADZF,OAAO,CAAC,eAAD,C,UASHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAER;AAAR,OAAD,C,sCATb,MACaO,aADb,SACmCT,SADnC,CAC6C;AAWzCW,QAAAA,WAAW,GAAI;AACX;AADW,eARCC,EAQD;AAAA,eANPC,WAMO,GANgB,KAMhB;AAAA,eALPC,aAKO,GALS,CAKT;;AAAA;;AAEX,eAAKF,EAAL,GAAUH,aAAa,CAACM,UAAd,EAAV;AACH;;AAEDC,QAAAA,KAAK,GAAI;AACL;AACA,cAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkBjB,QAAlB,CAAf;;AACA,cAAIgB,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACE,EAAT,CAAY,kBAAZ,EAAgC,KAAKC,WAArC,EAAkD,IAAlD;AACAH,YAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+B,KAAKC,WAApC,EAAiD,IAAjD;AACAH,YAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+B,KAAKC,WAApC,EAAiD,IAAjD;AACH;AACJ;;AAEDA,QAAAA,WAAW,CAAEC,KAAF,EAA0B;AACjC,cAAMJ,QAAQ,GAAG,KAAKC,YAAL,CAAkBjB,QAAlB,CAAjB;;AACA,cAAIgB,QAAQ,IAAII,KAAK,CAACC,YAAtB,EAAoC;AAChC,iBAAKC,KAAL,CAAWC,MAAX,GAAoB,0BAApB;AACA,iBAAKD,KAAL,CAAWE,QAAX,GAAsB,EAAtB;AACA,iBAAKF,KAAL,CAAWG,UAAX,GAAwB,EAAxB;AACA,iBAAKH,KAAL,CAAWI,aAAX,GAA0BrB,qBAAqB,CAACsB,MAAhD;AACA,iBAAKL,KAAL,CAAWL,YAAX,CAAwBd,WAAxB,EAAsCyB,WAAtC,GAAoD,IAAIxB,IAAJ,CAAS,GAAT,EAAc,GAAd,CAApD;AACA,iBAAKkB,KAAL,CAAWO,KAAX,GAAmB3B,KAAK,CAAC4B,GAAzB;AACA,iBAAKC,OAAL,GAAe,KAAf;AACA;AACH;;AACD,cAAIX,KAAK,CAACX,IAAN,IAAc,iBAAlB,EAAqC;AACjC,gBAAI,CAAC,KAAKG,WAAV,EAAuB;AACnB,mBAAKA,WAAL,GAAmB,IAAnB;AACH,aAFD,MAEO;AACH;AACH;AACJ,WAND,MAMO,IAAIQ,KAAK,CAACX,IAAN,IAAc,iBAAlB,EAAqC;AACxC,iBAAKG,WAAL,GAAmB,KAAnB;AACH;;AAED,cAAI,KAAKU,KAAT,EAAgB;AACZ,gBAAI,KAAKT,aAAL,GAAqB,EAAzB,EAA6B;AAAE,mBAAKS,KAAL,CAAWC,MAAX,GAAoB,EAApB;AAAwB,mBAAKV,aAAL,GAAqB,CAArB;AAAyB;;AAChF,iBAAKA,aAAL;AACA,iBAAKS,KAAL,CAAWC,MAAX,IAAqBH,KAAK,CAACC,YAAN,CAAmBW,IAAnB,CAAwBC,IAAxB,GAA+B,GAA/B,GAAqCb,KAAK,CAACX,IAA3C,GAAkD,GAAlD,GAAwDW,KAAK,CAACc,aAAN,CAAoBF,IAApB,CAAyBC,IAAjF,GAAwF,IAA7G;AACH;AACJ;;AArDwC,O,UAE1BnB,U,GAAa,C;;;;;iBAON,I","sourcesContent":["import { _decorator, Component, ITriggerEvent,\n    Collider, Label, ICollisionEvent, Color, \n    UITransform, Size, VerticalTextAlignment } from \"cc\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"CollisionTest\")\nexport class CollisionTest extends Component {\n\n    private static _idCounter = 0;\n    public readonly id: number;\n\n    private alreadyStay: boolean = false;\n    private messageAmount = 0;\n\n    @property({ type: Label })\n    public label: Label = null as any;\n\n    constructor () {\n        super();\n        this.id = CollisionTest._idCounter++;\n    }\n\n    start () {\n        // Your initialization goes here.\n        let collider = this.getComponent(Collider);\n        if (collider) {\n            collider.on('onCollisionEnter', this.onCollision, this);\n            collider.on('onCollisionStay', this.onCollision, this);\n            collider.on('onCollisionExit', this.onCollision, this);\n        }\n    }\n\n    onCollision (event: ICollisionEvent) {\n        const collider = this.getComponent(Collider);\n        if (collider != event.selfCollider) {\n            this.label.string = \"[错误]：self不等于自己，请提交 issue\";\n            this.label.fontSize = 40;\n            this.label.lineHeight = 40;\n            this.label.verticalAlign =VerticalTextAlignment.CENTER;\n            this.label.getComponent(UITransform)!.contentSize = new Size(400, 400);\n            this.label.color = Color.RED;\n            this.enabled = false;\n            return;\n        }\n        if (event.type == 'onCollisionStay') {\n            if (!this.alreadyStay) {\n                this.alreadyStay = true;\n            } else {\n                return;\n            }\n        } else if (event.type == 'onCollisionExit') {\n            this.alreadyStay = false;\n        }\n\n        if (this.label) {\n            if (this.messageAmount > 10) { this.label.string = \"\"; this.messageAmount = 0; }\n            this.messageAmount++\n            this.label.string += event.selfCollider.node.name + '一' + event.type + '一' + event.otherCollider.node.name + '\\n';\n        }\n    }\n\n}\n"]}