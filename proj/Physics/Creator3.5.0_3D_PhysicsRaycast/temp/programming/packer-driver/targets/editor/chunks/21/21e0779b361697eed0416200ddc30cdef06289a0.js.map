{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Physics/Creator3.5.0_3D_PhysicsRaycast/assets/script/RaycastHelper.ts"],"names":["_decorator","Component","Node","Prefab","resources","systemEvent","SystemEventType","geometry","Camera","PhysicsSystem","Enum","macro","game","KeyCode","PrefabPoolUtil","ccclass","property","menu","ERaycastType","EKey","KEY_R","KEY_G","KEY_B","RaycastHelper","type","tooltip","_cache","__preload","_point","load","args","console","error","_enable","addPersistRootNode","_container","onEnable","on","TOUCH_START","onTouchStart","KEY_DOWN","onKeyDown","onDisable","off","onDestroy","recover","event","keyCode","switch","touch","r","ray","p","getLocation","cameraCom","screenPointToRay","x","y","raycastType","CLOSEST","instance","raycastClosest","result","raycastClosestResult","clone","getItemByPoolName","push","setWorldPosition","hitPoint","setScale","scale","addChild","ALL","raycast","results","raycastResults","i","length","len","recoverItemByPoolName","pop","KEY"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,S,OAAAA,S;AAC1CC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,e,OAAAA,e;AAAwBC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,M,OAAAA,M;AAC/CC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAAsBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,O,OAAAA,O;;AAC5CC,MAAAA,c,iBAAAA,c;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,O,GAA8BjB,U;;iBAE/BkB,Y;AAAAA,QAAAA,Y,CAAAA,Y;AAAAA,QAAAA,Y,CAAAA,Y;SAAAA,Y,KAAAA,Y;;AAILR,MAAAA,IAAI,CAACQ,YAAD,CAAJ;;iBAEKC,I;AAAAA,QAAAA,I,CAAAA,I,QACGN,OAAO,CAACO,K;AADXD,QAAAA,I,CAAAA,I,QAEGN,OAAO,CAACQ,K;AAFXF,QAAAA,I,CAAAA,I,QAGGN,OAAO,CAACS,K;SAHXH,I,KAAAA,I;;AAKLT,MAAAA,IAAI,CAACS,IAAD,CAAJ;;+BAGaI,a,WADZR,OAAO,CAAC,eAAD,C,UASHC,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAEhB;AAAR,OAAD,C,UAGRQ,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAEN;AAAR,OAAD,C,UAGRF,QAAQ,CAAC;AACNQ,QAAAA,IAAI,EAAEL,IADA;AAENM,QAAAA,OAAO,EAAE;AAFH,OAAD,C,sCAfb,MACaF,aADb,SACmCtB,SADnC,CAC6C;AAAA;AAAA;AAAA,eAMjCyB,MANiC,GAMhB,EANgB;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAuBzCC,QAAAA,SAAS,GAAI;AACT,cAAIJ,aAAa,CAACK,MAAd,IAAwB,IAA5B,EAAkC;AAC9BxB,YAAAA,SAAS,CAACyB,IAAV,CAAe,cAAf,EAA+B1B,MAA/B,EAAuC,CAAC,GAAG2B,IAAJ,KAAa;AAChD,kBAAIA,IAAJ,EAAU;AACN,oBAAIA,IAAI,CAAC,CAAD,CAAR,EAAa;AACTC,kBAAAA,OAAO,CAACC,KAAR,CAAcF,IAAI,CAAC,CAAD,CAAlB;AACH,iBAFD,MAEO;AACHP,kBAAAA,aAAa,CAACK,MAAd,GAAuBE,IAAI,CAAC,CAAD,CAA3B;AACAP,kBAAAA,aAAa,CAACU,OAAd,GAAwB,IAAxB;AACH;AACJ;AACJ,aATD;AAUH;;AACDrB,UAAAA,IAAI,CAACsB,kBAAL,CAAwBX,aAAa,CAACY,UAAtC;AACH;;AAEDC,QAAAA,QAAQ,GAAI;AACR/B,UAAAA,WAAW,CAACgC,EAAZ,CAAe/B,eAAe,CAACgC,WAA/B,EAA4C,KAAKC,YAAjD,EAA+D,IAA/D;AACAlC,UAAAA,WAAW,CAACgC,EAAZ,CAAe/B,eAAe,CAACkC,QAA/B,EAAyC,KAAKC,SAA9C,EAAyD,IAAzD;AACH;;AAEDC,QAAAA,SAAS,GAAI;AACTrC,UAAAA,WAAW,CAACsC,GAAZ,CAAgBrC,eAAe,CAACgC,WAAhC,EAA6C,KAAKC,YAAlD,EAAgE,IAAhE;AACAlC,UAAAA,WAAW,CAACsC,GAAZ,CAAgBrC,eAAe,CAACkC,QAAhC,EAA0C,KAAKC,SAA/C,EAA0D,IAA1D;AACH;;AAEDG,QAAAA,SAAS,GAAI;AACT,eAAKC,OAAL;AACH;;AAEDJ,QAAAA,SAAS,CAAEK,KAAF,EAAwB;AAC7B,cAAIA,KAAK,CAACC,OAAN,IAAiB,KAAKC,MAA1B,EAAkC;AAC9BzB,YAAAA,aAAa,CAACU,OAAd,GAAwB,CAACV,aAAa,CAACU,OAAvC;AACH;AACJ;;AAEDM,QAAAA,YAAY,CAAEU,KAAF,EAAgB;AACxB,cAAI,CAAC1B,aAAa,CAACU,OAAnB,EAA4B;AAC5B,eAAKY,OAAL;AACA,gBAAMK,CAAC,GAAG,IAAI3C,QAAQ,CAAC4C,GAAb,EAAV;AACA,gBAAMC,CAAC,GAAGH,KAAK,CAACI,WAAN,EAAV;AACA,eAAKC,SAAL,CAAeC,gBAAf,CAAgCH,CAAC,CAACI,CAAlC,EAAqCJ,CAAC,CAACK,CAAvC,EAA0CP,CAA1C;;AACA,cAAI,KAAKQ,WAAL,IAAoBxC,YAAY,CAACyC,OAArC,EAA8C;AAC1C,gBAAIlD,aAAa,CAACmD,QAAd,CAAuBC,cAAvB,CAAsCX,CAAtC,CAAJ,EAA8C;AAC1C,oBAAMY,MAAM,GAAGrD,aAAa,CAACmD,QAAd,CAAuBG,oBAAtC;AACA,oBAAMC,KAAK,GAAG;AAAA;AAAA,oDAAeC,iBAAf,CAAiC,cAAjC,EAAiD1C,aAAa,CAACK,MAA/D,CAAd;;AACA,mBAAKF,MAAL,CAAYwC,IAAZ,CAAiBF,KAAjB;;AACAA,cAAAA,KAAK,CAACG,gBAAN,CAAuBL,MAAM,CAACM,QAA9B;AACAJ,cAAAA,KAAK,CAACK,QAAN,CAAe,KAAKC,KAApB,EAA2B,KAAKA,KAAhC,EAAuC,KAAKA,KAA5C;;AACA/C,cAAAA,aAAa,CAACY,UAAd,CAAyBoC,QAAzB,CAAkCP,KAAlC;AACH;AACJ,WATD,MASO,IAAI,KAAKN,WAAL,IAAoBxC,YAAY,CAACsD,GAArC,EAA0C;AAC7C,gBAAI/D,aAAa,CAACmD,QAAd,CAAuBa,OAAvB,CAA+BvB,CAA/B,CAAJ,EAAuC;AACnC,oBAAMwB,OAAO,GAAGjE,aAAa,CAACmD,QAAd,CAAuBe,cAAvC;;AACA,mBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,sBAAMd,MAAM,GAAGY,OAAO,CAACE,CAAD,CAAtB;AACA,sBAAMZ,KAAK,GAAG;AAAA;AAAA,sDAAeC,iBAAf,CAAiC,cAAjC,EAAiD1C,aAAa,CAACK,MAA/D,CAAd;;AACA,qBAAKF,MAAL,CAAYwC,IAAZ,CAAiBF,KAAjB;;AACAA,gBAAAA,KAAK,CAACG,gBAAN,CAAuBL,MAAM,CAACM,QAA9B;AACAJ,gBAAAA,KAAK,CAACK,QAAN,CAAe,KAAKC,KAApB,EAA2B,KAAKA,KAAhC,EAAuC,KAAKA,KAA5C;;AACA/C,gBAAAA,aAAa,CAACY,UAAd,CAAyBoC,QAAzB,CAAkCP,KAAlC;AACH;AACJ;AACJ;AACJ;;AAEDnB,QAAAA,OAAO,GAAI;AACP,cAAIiC,GAAG,GAAG,KAAKpD,MAAL,CAAYmD,MAAtB;;AACA,iBAAOC,GAAG,EAAV,EAAc;AACV;AAAA;AAAA,kDAAeC,qBAAf,CAAqC,cAArC,EAAqD,KAAKrD,MAAL,CAAYsD,GAAZ,EAArD,EAAyE,IAAzE;AACH;AACJ;;AA9FwC,O,UAE1BpD,M,GAAiB,I,UACjBK,O,GAAU,K,UACVE,U,GAAa,IAAIjC,IAAJ,CAAS,qBAAT,C;;;;;iBAKR,I;;;;;;;iBAGQgB,YAAY,CAACyC,O;;;;;;;iBAMxBhD,KAAK,CAACsE,GAAN,CAAU/B,C;;gFAE1BlC,Q;;;;;iBACe,C","sourcesContent":["import { _decorator, Component, Node, Prefab, resources,\n    systemEvent, SystemEventType, Touch, geometry, Camera, \n    PhysicsSystem, Enum, macro, EventKeyboard, game, KeyCode } from 'cc';\nimport { PrefabPoolUtil } from './PrefabPoolUtil';\nconst { ccclass, property, menu } = _decorator;\n\nenum ERaycastType {\n    ALL,\n    CLOSEST,\n}\nEnum(ERaycastType);\n\nenum EKey {\n    r = KeyCode.KEY_R,\n    g = KeyCode.KEY_G,\n    b = KeyCode.KEY_B,\n}\nEnum(EKey);\n\n@ccclass('RaycastHelper')\nexport class RaycastHelper extends Component {\n\n    private static _point: Prefab = null!;\n    private static _enable = false;\n    private static _container = new Node(\"_RAYCAST_CONTAINER_\");\n\n    private _cache: Node[] = [];\n\n    @property({ type: Camera })\n    cameraCom: Camera = null!;\n\n    @property({ type: ERaycastType })\n    raycastType: ERaycastType = ERaycastType.CLOSEST;\n\n    @property({\n        type: EKey,\n        tooltip: \"开关，控制全局\",\n    })\n    switch: number = macro.KEY.r;\n\n    @property\n    scale: number = 1;\n\n    __preload () {\n        if (RaycastHelper._point == null) {\n            resources.load('common/Point', Prefab, (...args) => {\n                if (args) {\n                    if (args[0]) {\n                        console.error(args[0]);\n                    } else {\n                        RaycastHelper._point = args[1] as Prefab;\n                        RaycastHelper._enable = true;\n                    }\n                }\n            });\n        }\n        game.addPersistRootNode(RaycastHelper._container);\n    }\n\n    onEnable () {\n        systemEvent.on(SystemEventType.TOUCH_START, this.onTouchStart, this);\n        systemEvent.on(SystemEventType.KEY_DOWN, this.onKeyDown, this);\n    }\n\n    onDisable () {\n        systemEvent.off(SystemEventType.TOUCH_START, this.onTouchStart, this);\n        systemEvent.off(SystemEventType.KEY_DOWN, this.onKeyDown, this);\n    }\n\n    onDestroy () {\n        this.recover();\n    }\n\n    onKeyDown (event: EventKeyboard) {\n        if (event.keyCode == this.switch) {\n            RaycastHelper._enable = !RaycastHelper._enable;\n        }\n    }\n\n    onTouchStart (touch: Touch) {\n        if (!RaycastHelper._enable) return;\n        this.recover();\n        const r = new geometry.ray();\n        const p = touch.getLocation();\n        this.cameraCom.screenPointToRay(p.x, p.y, r);\n        if (this.raycastType == ERaycastType.CLOSEST) {\n            if (PhysicsSystem.instance.raycastClosest(r)) {\n                const result = PhysicsSystem.instance.raycastClosestResult;\n                const clone = PrefabPoolUtil.getItemByPoolName('COMMON.Point', RaycastHelper._point) as Node;\n                this._cache.push(clone);\n                clone.setWorldPosition(result.hitPoint);\n                clone.setScale(this.scale, this.scale, this.scale);\n                RaycastHelper._container.addChild(clone);\n            }\n        } else if (this.raycastType == ERaycastType.ALL) {\n            if (PhysicsSystem.instance.raycast(r)) {\n                const results = PhysicsSystem.instance.raycastResults;\n                for (let i = 0; i < results.length; i++) {\n                    const result = results[i];\n                    const clone = PrefabPoolUtil.getItemByPoolName('COMMON.Point', RaycastHelper._point) as Node;\n                    this._cache.push(clone);\n                    clone.setWorldPosition(result.hitPoint);\n                    clone.setScale(this.scale, this.scale, this.scale);\n                    RaycastHelper._container.addChild(clone);\n                }\n            }\n        }\n    }\n\n    recover () {\n        let len = this._cache.length;\n        while (len--) {\n            PrefabPoolUtil.recoverItemByPoolName('COMMON.Point', this._cache.pop()!, true);\n        }\n    }\n\n}\n"]}