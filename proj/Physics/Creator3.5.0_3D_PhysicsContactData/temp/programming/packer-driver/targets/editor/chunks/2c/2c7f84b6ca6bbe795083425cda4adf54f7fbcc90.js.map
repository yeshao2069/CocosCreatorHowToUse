{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Physics/Creator3.5.0_3D_PhysicsContactData/assets/script/ContactPointHelper.ts"],"names":["_decorator","Component","Node","Prefab","resources","instantiate","Collider","game","Vec3","Quat","ccclass","property","q_0","ContactPointHelper","_entityMap","Map","__preload","_point","_flag","load","args","console","error","_arrow","_container","addPersistRootNode","onLoad","_insArr","push","onEnable","colliders","getComponents","that","forEach","e","on","onCollision","onDisable","off","event","has","otherCollider","uuid","set","pt","aw","map","get","active","contacts","i","wp","wn","isBodyA","getWorldPointOnA","getWorldNormalOnB","getWorldPointOnB","getWorldNormalOnA","length","setWorldScale","setParent","setWorldPosition","rotationTo","UNIT_Z","setWorldRotation","onDestroy","index","indexOf","splice","t","removeFromParent","destroy","b"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, resources,\n    instantiate, ICollisionEvent, Collider, game, Vec3, Quat } from 'cc';\nconst { ccclass, property } = _decorator;\nconst q_0 = new Quat();\n\n@ccclass('ContactPointHelper')\nexport class ContactPointHelper extends Component {\n\n    private static _point: Prefab = null!;\n    private static _arrow: Prefab = null!;\n    private static _flag = 0;\n    private static _insArr: ContactPointHelper[] = [];\n    private static _container: Node = null!;\n\n    private _entityMap: Map<string, { pt: Node[], aw: Node[] }> = new Map<string, { pt: Node[], aw: Node[] }>();\n\n    __preload () {\n        if (ContactPointHelper._point == null && !(ContactPointHelper._flag & 1)) {\n            ContactPointHelper._flag |= 1 << 0;\n            resources.load('common/Point', Prefab, (...args) => {\n                if (args) {\n                    if (args[0]) {\n                        console.error(args[0]);\n                    } else {\n                        ContactPointHelper._point = args[1] as Prefab;\n                    }\n                }\n            });\n        }\n        if (ContactPointHelper._arrow == null && !(ContactPointHelper._flag & (1 << 1))) {\n            ContactPointHelper._flag |= 1 << 1;\n            resources.load('common/Arrow', Prefab, (...args) => {\n                if (args) {\n                    if (args[0]) {\n                        console.error(args[0]);\n                    } else {\n                        ContactPointHelper._arrow = args[1] as Prefab;\n                    }\n                }\n            });\n        }\n        if (ContactPointHelper._container == null) {\n            ContactPointHelper._container = new Node('__CONTACT_POINT__');\n            game.addPersistRootNode(ContactPointHelper._container);\n        }\n    }\n\n    onLoad () {\n        ContactPointHelper._insArr.push(this);\n    }\n\n    onEnable () {\n        const colliders = this.getComponents(Collider);\n        const that = this;\n        colliders.forEach((e: Collider) => {\n            e.on('onCollisionEnter', that.onCollision, that);\n            e.on('onCollisionStay', that.onCollision, that);\n            e.on('onCollisionExit', that.onCollision, that);\n        })\n    }\n\n    onDisable () {\n        const colliders = this.getComponents(Collider);\n        const that = this;\n        colliders.forEach((e: Collider) => {\n            e.off('onCollisionEnter', that.onCollision, that);\n            e.off('onCollisionStay', that.onCollision, that);\n            e.off('onCollisionExit', that.onCollision, that);\n        })\n    }\n\n    onCollision (event: ICollisionEvent) {\n        if (ContactPointHelper._point && ContactPointHelper._arrow) {\n            if (!this._entityMap.has(event.otherCollider.uuid)) this._entityMap.set(event.otherCollider.uuid, { pt: [], aw: [] });\n            const map = this._entityMap.get(event.otherCollider.uuid)!;\n            map.pt.forEach((e) => { e.active = false; });\n            map.aw.forEach((e) => { e.active = false; });\n            event.contacts.forEach((e, i) => {\n                const wp = new Vec3();\n                const wn = new Vec3();\n                if (e.isBodyA) {\n                    e.getWorldPointOnA(wp);\n                    e.getWorldNormalOnB(wn);\n                } else {\n                    e.getWorldPointOnB(wp);\n                    e.getWorldNormalOnA(wn);\n                }\n\n                let pt: Node, aw: Node;\n                if (map.pt.length > i) {\n                    pt = map.pt[i]; aw = map.aw[i];\n                    pt.active = true; aw.active = true;\n                } else {\n                    pt = instantiate(ContactPointHelper._point);\n                    pt.setWorldScale(0.25, 0.25, 0.25);\n                    pt.setParent(ContactPointHelper._container);\n\n                    aw = instantiate(ContactPointHelper._arrow);\n                    aw.setParent(ContactPointHelper._container);\n\n                    map.pt.push(pt);\n                    map.aw.push(aw);\n                }\n                pt.setWorldPosition(wp);\n                aw.setWorldPosition(wp);\n                Quat.rotationTo(q_0, Vec3.UNIT_Z, wn);\n                aw.setWorldRotation(q_0);\n            })\n        }\n    }\n\n    onDestroy () {\n        const index = ContactPointHelper._insArr.indexOf(this);\n        if (index >= 0) {\n            ContactPointHelper._insArr.splice(index, 1);\n        }\n        this._entityMap.forEach((e: { pt: Node[], aw: Node[] }) => {\n            e.pt.forEach((t) => { t.removeFromParent(); t.destroy(); })\n            e.aw.forEach((b) => { b.removeFromParent(); b.destroy(); })\n        })\n    }\n}\n"]}