{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Physics/Creator3.5.0_3D_PhysicsRaycastClosest/assets/raycastClosest.ts"],"names":["_decorator","Component","Node","PhysicsSystem","geometry","Vec3","ccclass","property","RaycastClosest","start","mask","console","log","pos1","cube1","position","pos2","cube2","pos3","x","y","z","ray","Ray","physys","instance","maxdistance","result","raycastClosest"],"mappings":";;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,I,OAAAA,I;;;;;;;OACzD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;gCAGjBQ,c,WADZF,OAAO,CAAC,gBAAD,C,UAGHC,QAAQ,CAACL,IAAD,C,UAGRK,QAAQ,CAACL,IAAD,C,2BANb,MACaM,cADb,SACoCP,SADpC,CAC8C;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAQ1CQ,QAAAA,KAAK,GAAI;AACL;AAEA,cAAIC,IAAI,GAAI,KAAG,CAAJ,GAAU,KAAG,CAAxB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,cAAMG,IAAI,GAAG,KAAKC,KAAL,CAAWC,QAAxB;AACA,cAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWF,QAAxB;AACA,cAAMG,IAAI,GAAG,IAAIb,IAAJ,EAAb;AACAa,UAAAA,IAAI,CAACC,CAAL,GAASH,IAAI,CAACG,CAAL,GAASN,IAAI,CAACM,CAAvB;AACAD,UAAAA,IAAI,CAACE,CAAL,GAASJ,IAAI,CAACI,CAAL,GAASP,IAAI,CAACO,CAAvB;AACAF,UAAAA,IAAI,CAACG,CAAL,GAASL,IAAI,CAACK,CAAL,GAASR,IAAI,CAACQ,CAAvB;AAEAV,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,EAAiBG,IAAjB,EAZK,CAaL;;AACA,cAAIM,GAAG,GAAG,IAAIlB,QAAQ,CAACmB,GAAb,CAAiBV,IAAI,CAACM,CAAtB,EAAyBN,IAAI,CAACO,CAA9B,EAAiCP,IAAI,CAACQ,CAAtC,EAAyCH,IAAI,CAACC,CAA9C,EAAiDD,IAAI,CAACE,CAAtD,EAAyDF,IAAI,CAACG,CAA9D,CAAV;AACA,cAAIG,MAAM,GAAGrB,aAAa,CAACsB,QAA3B;AACA,cAAIC,WAAW,GAAG,KAAlB;AACA,cAAMC,MAAM,GAAGH,MAAM,CAACI,cAAP,CAAsBN,GAAtB,EAA2BZ,IAA3B,EAAiCgB,WAAjC,EAA8C,KAA9C,CAAf;AACAf,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBe,MAApB,EAlBK,CAkBwB;AAChC;;AA3ByC,O","sourcesContent":["\nimport { _decorator, Component, Node, PhysicsSystem, geometry, Vec3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('RaycastClosest')\nexport class RaycastClosest extends Component {\n    // 检测点 1\n    @property(Node)\n    cube1!: Node;\n    // 检测点 2\n    @property(Node)\n    cube2!: Node;\n\n    start () {\n        // [3]\n\n        let mask = (1<<2) | (1<<1);\n        console.log(mask);\n        const pos1 = this.cube1.position;\n        const pos2 = this.cube2.position;\n        const pos3 = new Vec3();\n        pos3.x = pos2.x - pos1.x;\n        pos3.y = pos2.y - pos1.y;\n        pos3.z = pos2.z - pos1.z;\n\n        console.log(pos1,pos2);\n        // cube1本身，去检查cube2，所以起点为cube1 终点为cube2, Ray的3,4,5参数为方向(终点坐标向量-起点坐标向量)\n        let ray = new geometry.Ray(pos1.x, pos1.y, pos1.z, pos3.x, pos3.y, pos3.z);\n        var physys = PhysicsSystem.instance;\n        var maxdistance = 10000;\n        const result = physys.raycastClosest(ray, mask, maxdistance, false);\n        console.log(\"检测结果:\",result); // 如果是true则存在碰撞体，如果是false则不存在碰撞体\n    }\n}\n"]}