{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Physics/Creator3.5.0_3D_PhysicsTriggerEvent/assets/script/LoopMotion.ts"],"names":["_decorator","Component","Vec3","Quat","Node","menu","ccclass","property","LoopMotion","visible","USE_TRANSLATE","USE_LOOP","USE_ROTATION","USE_SCALE","USE_LOOP_SCALE","_origin","_rot","_scale","start","fromEuler","deltaEuler","x","y","z","copy","node","worldPosition","worldScale","update","deltaTime","posNow","Math","abs","displacement","deltaMotion","translate","NodeSpace","WORLD","ws","scaleLength","deltaScale","setWorldScale","rotate"],"mappings":"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","sourcesContent":["import { _decorator, Component, Vec3, Quat, Node } from \"cc\";\nconst { menu, ccclass, property } = _decorator;\n\n@ccclass(\"LoopMotion\")\nexport class LoopMotion extends Component {\n\n    @property\n    readonly USE_TRANSLATE = false;\n\n    @property({ visible: function (this: LoopMotion) { return this.USE_TRANSLATE } })\n    readonly deltaMotion = new Vec3();\n\n    @property({ visible: function (this: LoopMotion) { return this.USE_TRANSLATE } })\n    readonly USE_LOOP = false;\n\n    @property({ visible: function (this: LoopMotion) { return this.USE_TRANSLATE && this.USE_LOOP } })\n    readonly displacement = new Vec3();\n\n    @property\n    readonly USE_ROTATION = false;\n\n    @property({ visible: function (this: LoopMotion) { return this.USE_ROTATION } })\n    readonly deltaEuler = new Vec3();\n\n    @property\n    readonly USE_SCALE = false;\n\n    @property({ visible: function (this: LoopMotion) { return this.USE_SCALE } })\n    readonly deltaScale = new Vec3();\n\n    @property({ visible: function (this: LoopMotion) { return this.USE_SCALE } })\n    readonly USE_LOOP_SCALE = false;\n\n    @property({ visible: function (this: LoopMotion) { return this.USE_SCALE && this.USE_LOOP_SCALE } })\n    readonly scaleLength = new Vec3();\n\n    private readonly _origin = new Vec3();\n    private readonly _rot = new Quat();\n    private readonly _scale = new Vec3();\n\n    start () {\n        Quat.fromEuler(this._rot, this.deltaEuler.x, this.deltaEuler.y, this.deltaEuler.z);\n        Vec3.copy(this._origin, this.node.worldPosition);\n        Vec3.copy(this._scale, this.node.worldScale);\n    }\n\n    update (deltaTime: number) {\n        if (this.USE_TRANSLATE) {\n            if (this.USE_LOOP) {\n                const posNow = this.node.worldPosition;\n                if (Math.abs(posNow.x - this._origin.x) > this.displacement.x) this.deltaMotion.x *= -1;\n                if (Math.abs(posNow.y - this._origin.y) > this.displacement.y) this.deltaMotion.y *= -1;\n                if (Math.abs(posNow.z - this._origin.z) > this.displacement.z) this.deltaMotion.z *= -1;\n            }\n            this.node.translate(this.deltaMotion, Node.NodeSpace.WORLD);\n        }\n\n        if (this.USE_SCALE) {\n            const ws = this.node.worldScale;\n            if (this.USE_LOOP_SCALE) {\n                if (Math.abs(ws.x - this._scale.x) > this.scaleLength.x) this.deltaScale.x *= -1;\n                if (Math.abs(ws.y - this._scale.y) > this.scaleLength.y) this.deltaScale.y *= -1;\n                if (Math.abs(ws.z - this._scale.z) > this.scaleLength.z) this.deltaScale.z *= -1;\n            }\n\n            this.node.setWorldScale(ws.x + this.deltaScale.x, ws.y + this.deltaScale.y, ws.z + this.deltaScale.z);\n        }\n\n        if (this.USE_ROTATION) {\n            this.node.rotate(this._rot, Node.NodeSpace.WORLD);\n        }\n    }\n}\n"]}