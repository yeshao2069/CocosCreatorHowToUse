{"version":3,"sources":["file:///Users/mu/work/gitee/cocos-creator-how-to-use/proj/Physics/Creator3.5.0_3D_PhysicsPlaneCollider/assets/script/PrefabPoolUtil.ts"],"names":["PrefabPoolUtil","instantiate","isValid","getItemByPoolName","poolName","prefab","time","_pool","pool","node","length","pop","setTimeout","parent","recoverItemByPoolName","entity","removeFromParent","index","indexOf","push","clear"],"mappings":";;;uCAEaA,c;;;;;;;AAFsBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,O,OAAAA,O;;;;;;;gCAEnCF,c,GAAN,MAAMA,cAAN,CAAqB;AAIxB;AACJ;AACA;AACA;AACA;AACmC,eAAjBG,iBAAiB,CAAEC,QAAF,EAAoBC,MAApB,EAAoCC,IAApC,EAAyD;AAEpF,cAAI,KAAKC,KAAL,CAAWH,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,iBAAKG,KAAL,CAAWH,QAAX,IAAuB,EAAvB;AACH;;AAED,cAAMI,IAAI,GAAG,KAAKD,KAAL,CAAWH,QAAX,CAAb;AAEA,cAAIK,IAAU,GAAG,IAAjB;;AACA,cAAID,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACjBD,YAAAA,IAAI,GAAGD,IAAI,CAACG,GAAL,EAAP;AACH,WAFD,MAEO;AACHF,YAAAA,IAAI,GAAGR,WAAW,CAACI,MAAD,CAAlB;AACH;;AAED,cAAIC,IAAI,IAAI,IAAZ,EAAkB;AACd;AACAM,YAAAA,UAAU,CAAC,MAAM;AACb,kBAAIV,OAAO,CAACO,IAAD,CAAX,EAAmB;AACfA,gBAAAA,IAAI,CAACI,MAAL,GAAc,IAAd;AACA,qBAAKC,qBAAL,CAA2BV,QAA3B,EAAqCK,IAArC;AACH;AACJ,aALS,EAKPH,IAAI,GAAG,IALA,CAAV;AAMH;;AAED,iBAAOG,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACuC,eAArBK,qBAAqB,CAAEV,QAAF,EAAoBW,MAApB,EAAkCC,gBAAlC,EAA8D;AAE7F,cAAI,KAAKT,KAAL,IAAc,IAAlB,EACI;AAEJ,cAAMC,IAAI,GAAG,KAAKD,KAAL,CAAWH,QAAX,CAAb;AACA,cAAIa,KAAK,GAAGT,IAAI,CAACU,OAAL,CAAaH,MAAb,CAAZ;;AACA,cAAIE,KAAK,IAAI,CAAC,CAAd,EAAiB;AACb,gBAAID,gBAAJ,EAAsBD,MAAM,CAACC,gBAAP;AACtBR,YAAAA,IAAI,CAACW,IAAL,CAAUJ,MAAV;AACH;AACJ;;AAEkB,eAALK,KAAK,CAAEhB,QAAF,EAAoB;AACnC,iBAAO,KAAKG,KAAL,CAAWH,QAAX,CAAP;AACH;;AAzDuB,O;;AAAfJ,MAAAA,c,CAEMO,K,GAAQ,E","sourcesContent":["import { _decorator, Prefab, Node, instantiate, isValid } from \"cc\";\n\nexport class PrefabPoolUtil {\n\n    private static _pool = {};\n\n    /**\n     * get a entity with pool name\n     * @param poolName the pool name\n     * @param time  optional, the time when recover, in seconds\n     */\n    public static getItemByPoolName (poolName: string, prefab: Prefab, time?: number): Node {\n\n        if (this._pool[poolName] == null) {\n            this._pool[poolName] = [];\n        }\n\n        const pool = this._pool[poolName];\n\n        let node: Node = null!;\n        if (pool.length > 0) {\n            node = pool.pop();\n        } else {\n            node = instantiate(prefab);\n        }\n\n        if (time != null) {\n            // delay recover node with pool name\n            setTimeout(() => {\n                if (isValid(node)) {\n                    node.parent = null;\n                    this.recoverItemByPoolName(poolName, node);\n                }\n            }, time * 1000);\n        }\n\n        return node;\n    }\n\n    /**\n     * recover a entity with pool name\n     * @param poolName the pool name\n     * @param entity  the node need to recover\n     */\n    public static recoverItemByPoolName (poolName: string, entity: Node, removeFromParent?: boolean) {\n\n        if (this._pool == null)\n            return;\n\n        const pool = this._pool[poolName];\n        let index = pool.indexOf(entity);\n        if (index == -1) {\n            if (removeFromParent) entity.removeFromParent();\n            pool.push(entity);\n        }\n    }\n\n    public static clear (poolName: string) {\n        delete this._pool[poolName];\n    }\n}\n"]}